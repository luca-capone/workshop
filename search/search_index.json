{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Benvenuti al Python Workshop!</p> <p>Siamo entusiasti di iniziare questo viaggio insieme nel mondo della programmazione.</p> <p>Prima di iniziare, \u00e8 fondamentale completare il processo di setup. Per fare ci\u00f2, vi preghiamo di seguire attentamente le istruzioni disponibili nella pagina di setup. La procedura richiede circa mezz'ora (pi\u00f9 tempo se state usando un PC aziendale).</p> <p>Assicuratevi di completare tutti i passaggi indicati prima dell'inizio del corso. Questo garantir\u00e0 che tutti possano iniziare il workshop con tutti gli strumenti necessari gi\u00e0 pronti e configurati.</p> <p>Il workshop coprir\u00e0 il materiale presente in questa pagina e si concluder\u00e0 con un piccolo progetto per consolidare le nozioni apprese.</p> <p>Il contenuto di questo sito pu\u00f2 essere stampato visitando questa pagina ed esportando il contenuto in PDF.</p>"},{"location":"about.html","title":"About","text":"<p>MIT License</p> <p>Copyright \u00a9 2024 Luca Capone</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"schedule.html","title":"Programma","text":"Orario Durata Fine Evento 08:45 00:30 09:15 Welcome Coffee 09:15 00:30 09:45 Opening Speech 09:45 01:45 11:30 Fundamentals 11:30 00:15 11:45 Coffee Break 11:45 01:15 13:00 Control Flow 13:00 01:00 14:00 Lunch 14:00 01:30 15:30 Functions + Ecosystems (backup: Pandas) 15:30 00:15 15:45 Coffee Break 15:45 02:00 17:45 Esercizio finale (use case bancario) + Wrap up giornata 17:45 00:15 18:00 Closing Remarks + Pictures 18:00 Fine lavori"},{"location":"setup.html","title":"Ambiente di sviluppo","text":""},{"location":"setup.html#installazione-di-python","title":"Installazione di Python","text":"<p>La prima cosa di cui abbiamo bisogno, chiaramente, \u00e8 Python stesso.</p> WindowsMacLinux <ul> <li>Vai al sito ufficiale di Python: python.org.</li> <li>Nella sezione \"Downloads\", trova la versione per Windows e clicca per scaricarla.</li> <li>Esegui il file scaricato (<code>.exe</code>).</li> <li>Seleziona \"Add Python to PATH\" all'inizio dell'installazione. Questo passaggio \u00e8 cruciale per eseguire Python da qualsiasi prompt dei comandi.</li> <li>Clicca su \"Install Now\".</li> <li>Apri il Prompt dei comandi (CMD) o PowerShell.</li> <li>Digita <code>python --version</code> e premi Enter. Dovrebbe mostrare la versione di Python installata.</li> </ul> <ul> <li>Visita il sito ufficiale di Python: python.org.</li> <li>Nella sezione \"Downloads\", seleziona la versione per macOS e clicca per scaricarla.</li> <li>Apri il file <code>.pkg</code> scaricato per avviare l'installazione.</li> <li>Segui le istruzioni sullo schermo per installare Python. Potrebbe essere necessario inserire la password dell'account amministratore.</li> <li>Una volta completata l'installazione, apri il Terminal.</li> <li>Digita <code>python3 --version</code> e premi Enter per verificare l'installazione. Dovrebbe mostrare la versione di Python installata.</li> </ul> <ul> <li>La maggior parte delle distribuzioni Linux viene con Python gi\u00e0 installato. Per verificare, apri il terminale.</li> <li>Digita <code>python3 --version</code> e premi Enter. Se Python \u00e8 installato, dovrebbe mostrare la versione.</li> <li>Se Python non \u00e8 installato, usa il gestore pacchetti della tua distribuzione. Per esempio, su Debian o Ubuntu, usa <code>sudo apt-get install python3</code>.</li> <li>Segui le istruzioni sullo schermo per completare l'installazione.</li> <li>Dopo l'installazione, verifica nuovamente la versione di Python con <code>python3 --version</code> nel terminale.</li> </ul>"},{"location":"setup.html#installazione-di-visual-studio-code","title":"Installazione di Visual Studio Code","text":"<p>Per sviluppare in Python, ci serve un ambiente dove scrivere, testare e gestire il codice. Le opzioni possibili sono numerose, ma si distinguono approssimativamente in due categorie editor di testo ed ambienti di sviluppo integrati (Integrated Development Environments, IDE).</p> <ul> <li>Editor di Testo: Sono programmi focalizzati sulla scrittura e modifica del codice sorgente. Offrono funzionalit\u00e0 come l'evidenziazione della sintassi e il completamento automatico del codice. Esempi includono Notepad++ e Sublime Text.</li> <li>IDE: Un IDE \u00e8 un ambiente pi\u00f9 completo che integra diverse funzionalit\u00e0: editor di testo, debugger, compilatore/interprete, e altri strumenti utili. Esempi sono PyCharm e Eclipse.</li> </ul> <p>Visual Studio Code (VSCode) si posiziona a met\u00e0 strada, in quanto \u00e8 tecnicamente un editor di testo ma offre un sistema di estensioni che consentono di aggiungere le funzionalit\u00e0 di un IDE. Questo lo rende ideale in quanto \u00e8 complesso esattamente quanto necessario e non di pi\u00f9.</p> <p>Command palette</p> <p>VSCode \u00e8 dotato di una Command Palette. Accessibile tramite <code>Ctrl+Shift+P</code> su Windows/Linux o <code>Cmd+Shift+P</code> su MacOS, questa funzionalit\u00e0 permette di accedere rapidamente a comandi e funzioni del programma. Potete cercare comandi, installare estensioni, aprire file, e molto altro, tutto da un'unica interfaccia. La Command Palette \u00e8 uno strumento essenziale, usatelo!</p> WindowsMacLinux <ul> <li>Vai al sito ufficiale di VSCode: code.visualstudio.com.</li> <li>Scarica la versione per Windows.</li> <li>Esegui il file scaricato (<code>.exe</code>).</li> <li>Segui le istruzioni per completare l'installazione.</li> <li>Installa questa estensione</li> <li>Crea una cartella <code>python_workshop</code> da qualche parte sul tuo computer</li> <li>Apri la cartella <code>python_workshop</code> in VSCode da <code>File</code> <code>Open Folder</code></li> <li>Apri un nuovo file in VSCode.</li> <li>Scrivi <code>print(\"Hello, world!\")</code></li> <li>Salva il file con estensione <code>.py</code></li> <li>Esegui lo script premendo <code>Ctrl + F5</code> e seleziona Python come ambiente di esecuzione.</li> </ul> <ul> <li>Visita il sito ufficiale di Visual Studio Code: code.visualstudio.com.</li> <li>Scarica la versione per macOS.</li> <li>Apri il file <code>.zip</code> scaricato e trascina l'icona di Visual Studio Code nella cartella Applicazioni.</li> <li>Apri Visual Studio Code dal Finder o dalla Launchpad.</li> <li>Installa l'estensione Python dal marketplace.</li> <li>Crea una cartella <code>python_workshop</code> da qualche parte sul tuo computer</li> <li>Apri la cartella <code>python_workshop</code> in VSCode da <code>File</code> <code>Open Folder</code></li> <li>Apri un nuovo file in VSCode.</li> <li>Digita <code>print(\"Hello, world!\")</code>.</li> <li>Salva il file con estensione <code>.py</code>.</li> <li>Esegui lo script premendo <code>Cmd + F5</code> e scegli Python come ambiente di esecuzione.</li> </ul> <ul> <li>Visita il sito ufficiale di Visual Studio Code: code.visualstudio.com.</li> <li>Scarica la versione per Linux (Debian, Ubuntu, Fedora, Red Hat o SUSE).</li> <li>Segui le istruzioni specifiche per la tua distribuzione per installare il pacchetto scaricato.</li> <li>Una volta installato, apri Visual Studio Code dal menu delle applicazioni o dal terminale.</li> <li>Installa l'estensione Python dal marketplace.</li> <li>Crea una cartella <code>python_workshop</code> da qualche parte sul tuo computer</li> <li>Apri la cartella <code>python_workshop</code> in VSCode da <code>File</code> <code>Open Folder</code></li> <li>Crea un nuovo file in VSCode.</li> <li>Scrivi <code>print(\"Hello, world!\")</code>.</li> <li>Salva il file con estensione <code>.py</code>.</li> <li>Esegui lo script premendo <code>Ctrl + F5</code> e seleziona Python come ambiente di esecuzione.</li> </ul>"},{"location":"setup.html#installazione-di-poetry","title":"Installazione di Poetry","text":"<p>Poetry \u00e8 uno strumento per la gestione di progetti Python che aiuta a semplificare e ottimizzare diverse attivit\u00e0 cruciali, come la gestione delle dipendenze e la configurazione degli strumenti di sviluppo. Ci servir\u00e0 pi\u00f9 avanti.</p> WindowsMacLinux <ol> <li>Apri il Prompt dei comandi (CMD) o PowerShell.</li> <li> <p>Esegui il comando per scaricare e installare Poetry:</p> <pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -\n</code></pre> </li> <li> <p>Dopo l'installazione, riavvia il Prompt dei comandi o PowerShell.</p> </li> <li>Verifica l'installazione con il comando <code>poetry --version</code>.</li> </ol> <ol> <li>Apri il terminale.</li> <li> <p>Usa il comando curl per scaricare e installare Poetry:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> </li> <li> <p>Chiudi e riapri il terminale.</p> </li> <li>Verifica l'installazione con <code>poetry --version</code>.</li> </ol> <ol> <li>Apri il terminale.</li> <li> <p>Per installare Poetry, usa il comando:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> </li> <li> <p>Una volta completata l'installazione, chiudi e riapri il terminale.</p> </li> <li>Controlla che Poetry sia stato installato correttamente con <code>poetry --version</code>.</li> </ol>"},{"location":"material/classes.html","title":"Classi","text":""},{"location":"material/classes.html#programmazione-orientata-agli-oggetti","title":"Programmazione Orientata agli Oggetti","text":"<p>Python \u00e8 un linguaggio di programmazione che supporta la programmazione orientata agli oggetti (object oriented programming, OOP). Per capire questo concetto, immaginate un oggetto come una scatola che contiene informazioni e strumenti. Le informazioni sono chiamate attributi, mentre gli strumenti sono le funzioni o metodi.</p> <p>Una classe \u00e8 come un modello (template) per creare oggetti. Per definire una classe, si utilizza la parola chiave <code>class</code>, seguita dal nome della classe e due punti. All'interno della classe, si definiscono le variabili ed i metodi che appartengono alla classe.</p> <pre><code>class Persona:\n    def __init__(self, nome, eta):\n        self.nome = nome\n        self.eta = eta\n\n    def mostra_info(self):\n        print(f\"Nome: {self.nome}, Et\u00e0: {self.eta}\")\n</code></pre> <p>Per creare un oggetto della classe, si chiama il nome della classe con i parametri definiti nel metodo <code>__init__</code> (il costruttore della classe).</p> <pre><code>persona1 = Persona(\"Luca\", 32)\npersona1.mostra_info()  # Output: Nome: Luca, Et\u00e0: 32\n</code></pre> <p>Le classi sono, a loro volta, oggetti e sono istanze di <code>type</code>. Ogni istanza della classe eredita attributi e metodi della classe. I metodi possono agire sulla specifica istanza tramite l'argomento speciale <code>self</code>.</p> <pre><code>class Square:\n    # `side` \u00e8 un attributo di `Square`\n    side = 8\n\n    # `area` \u00e8 un metodo di `Square`\n    def area(self):\n        return self.side**2\n\n\nsq = Square()\nisinstance(sq, Square)\nprint(sq.area())\nprint(Square.area(sq))\n</code></pre>"},{"location":"material/classes.html#attributi-e-metodi","title":"Attributi e Metodi","text":"<p>Un oggetto pu\u00f2 essere qualcosa di semplice come un numero o una stringa, o pi\u00f9 complesso come una data o un file. Ogni oggetto ha:</p> <ol> <li>attributi: Sono come le caratteristiche o le propriet\u00e0 dell'oggetto. Per esempio, in un oggetto che rappresenta una data, gli attributi potrebbero essere il giorno, il mese e l'anno.</li> <li>metodi: Sono come le azioni che l'oggetto pu\u00f2 eseguire. Se pensate a un oggetto che rappresenta un file, un metodo potrebbe essere l'apertura o la chiusura del file.</li> </ol> <p>Una variabile definita all'interno di un metodo \u00e8 propria della singola istanza, mentre una variabile definita al di fuori del metodo \u00e8 comune a tutte le istanze di quella classe. Si parla quindi di variabili di classe e variabili di istanza.</p> <pre><code>class MyClass:\n    # Variabile di classe\n    z = 4\n\n    def __init__(self, x, y):\n        # Variabili di istanza\n        self.x = x\n        self.y = y\n</code></pre>"},{"location":"material/classes.html#identita","title":"Identit\u00e0","text":"<p>Ogni oggetto in Python ha un identificativo unico, un tipo e vive in uno spazio dei nomi. Lo spazio dei nomi \u00e8 come un grande elenco che tiene traccia di tutti gli oggetti e dei loro nomi. L'operatore <code>.</code> \u00e8 usato per accedere agli attributi e ai metodi degli oggetti, permettendoci di \"navigare\" nello spazio dei nomi.</p> <p>Quando assegniamo un valore a una variabile, in realt\u00e0 stiamo collegando un nome a un oggetto. Se cambiamo il valore della variabile, stiamo collegando quel nome a un nuovo oggetto. Possiamo vedere questo attraverso la funzione <code>id()</code>, che mostra l'identificativo unico di un oggetto.</p> <pre><code>x = 2\nprint(id(x))  # Mostra l'ID di x\nx = 3\nprint(id(x))  # Mostra un nuovo ID perch\u00e9 x ora si riferisce a un oggetto diverso\n</code></pre>"},{"location":"material/classes.html#confronto-tra-oggetti","title":"Confronto tra oggetti","text":"<p>Quando confrontiamo due oggetti, possiamo usare <code>==</code> per vedere se hanno lo stesso valore o <code>is</code> per vedere se sono lo stesso oggetto (ovvero hanno lo stesso identificativo).</p> <pre><code>a = 1000\nb = 1000\nprint(a == b)  # True, perch\u00e9 i valori sono uguali\nprint(a is b)  # False, perch\u00e9 sono due oggetti separati\n\na = b\nprint(a == b)  # True, i valori sono uguali\nprint(a is b)  # True, ora a e b si riferiscono allo stesso oggetto\n</code></pre>"},{"location":"material/classes.html#ereditarieta","title":"Ereditariet\u00e0","text":"<p>Le classi possono ereditare propriet\u00e0 e metodi da altre classi. Questo concetto \u00e8 noto come ereditariet\u00e0 e aiuta a ridurre la duplicazione del codice.</p> <pre><code>class Studente(Persona):\n    def __init__(self, nome, eta, anno_di_studio):\n        super().__init__(nome, eta)\n        self.anno_di_studio = anno_di_studio\n\n    def mostra_info_studente(self):\n        print(\n            f\"Nome: {self.nome}, Et\u00e0: {self.eta}, Anno di Studio: {self.anno_di_studio}\"\n        )\n</code></pre> <p>In questo esempio, la classe <code>Studente</code> eredita da <code>Persona</code> e aggiunge ulteriori funzionalit\u00e0.</p>"},{"location":"material/classes.html#esercizi","title":"Esercizi","text":""},{"location":"material/classes.html#esercizio-1","title":"Esercizio 1","text":"<p>Definisci una classe <code>Auto</code> con due attributi di istanza, <code>marca</code> e <code>modello</code>. Aggiungi un metodo <code>mostra_info</code> che stampi marca e modello dell'auto.</p> Soluzione <pre><code>class Auto:\n    def __init__(self, marca, modello):\n        self.marca = marca\n        self.modello = modello\n\n    def mostra_info(self):\n        print(f\"Marca: {self.marca}, Modello: {self.modello}\")\n\n\nmia_auto = Auto(\"Fiat\", \"500\")\nmia_auto.mostra_info()  # Output: Marca: Fiat, Modello: 500\n</code></pre>"},{"location":"material/classes.html#esercizio-2","title":"Esercizio 2","text":"<p>Crea una classe <code>Libro</code> con gli attributi <code>titolo</code> e <code>autore</code> e un metodo <code>get_dettagli</code> che restituisca una stringa con titolo e autore del libro.</p> Soluzione <pre><code>class Libro:\n    def __init__(self, titolo, autore):\n        self.titolo = titolo\n        self.autore = autore\n\n    def get_dettagli(self):\n        return f\"Titolo: {self.titolo}, Autore: {self.autore}\"\n\n\nmio_libro = Libro(\"Il Signore degli Anelli\", \"J.R.R. Tolkien\")\nprint(\n    mio_libro.get_dettagli()\n)  # Output: Titolo: Il Signore degli Anelli, Autore: J.R.R. Tolkien\n</code></pre>"},{"location":"material/classes.html#esercizio-3","title":"Esercizio 3","text":"<p>Definisci una classe <code>Punto</code> con due attributi, <code>x</code> e <code>y</code>, rappresentanti le coordinate in uno spazio bidimensionale. Aggiungi un metodo <code>mostra</code> che stampi le coordinate del punto.</p> Soluzione <pre><code>class Punto:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def mostra(self):\n        print(f\"Punto({self.x}, {self.y})\")\n\n\npunto = Punto(5, 10)\npunto.mostra()  # Output: Punto(5, 10)\n</code></pre>"},{"location":"material/classes.html#esercizio-4","title":"Esercizio 4","text":"<p>Crea una classe <code>Contatore</code> con un attributo di classe <code>count</code> inizializzato a 0. Aggiungi un metodo <code>incrementa</code> che aumenti <code>count</code> di 1 ogni volta che viene chiamato.</p> Soluzione <pre><code>class Contatore:\n    count = 0\n\n    def incrementa(self):\n        self.count += 1\n\n\nContatore.incrementa()\nContatore.incrementa()\nprint(Contatore.count)  # Output: 2\n</code></pre>"},{"location":"material/classes.html#esercizio-5","title":"Esercizio 5","text":"<p>Definisci una classe <code>Cerchio</code> con l'attributo di istanza <code>raggio</code>. Aggiungi metodi per calcolare l'area e la circonferenza del cerchio.</p> Soluzione <pre><code>import math\n\n\nclass Cerchio:\n    def __init__(self, raggio):\n        self.raggio = raggio\n\n    def area(self):\n        return math.pi * self.raggio**2\n\n    def circonferenza(self):\n        return 2 * math.pi * self.raggio\n\n\ncerchio = Cerchio(3)\nprint(f\"Area: {cerchio.area()}\")\nprint(f\"Circonferenza: {cerchio.circonferenza()}\")\n</code></pre>"},{"location":"material/classes.html#esercizio-6","title":"Esercizio 6","text":"<p>Crea una classe <code>Banca</code> con due attributi di istanza: <code>nome</code> e <code>bilancio</code>. Implementa i metodi <code>deposita</code> e <code>preleva</code> per modificare il bilancio e un metodo <code>mostra_bilancio</code> per visualizzare il bilancio attuale.</p> Soluzione <pre><code>class Banca:\n    def __init__(self, nome, bilancio):\n        self.nome = nome\n        self.bilancio = bilancio\n\n    def deposita(self, importo):\n        self.bilancio += importo\n\n    def preleva(self, importo):\n        if importo &gt; self.bilancio:\n            print(\"Fondi insufficienti\")\n        else:\n            self.bilancio -= importo\n\n    def mostra_bilancio(self):\n        print(f\"Bilancio attuale: {self.bilancio}\")\n\n\nconto = Banca(\"Luca\", 1000)\nconto.deposita(500)\nconto.mostra_bilancio()  # Output: Bilancio attuale: 1500\nconto.preleva(200)\nconto.mostra_bilancio()  # Output: Bilancio attuale: 1300\n</code></pre>"},{"location":"material/classes.html#esercizio-7","title":"Esercizio 7","text":"<p>Definisci una classe <code>Animale</code> con un metodo <code>emetti_suono</code>. Crea due sottoclassi, <code>Cane</code> e <code>Gatto</code>, che ereditino da <code>Animale</code> e ognuna con una propria implementazione di <code>emetti_suono</code>.</p> Soluzione <pre><code>class Animale:\n    def emetti_suono(self):\n        pass\n\n\nclass Cane(Animale):\n    def emetti_suono(self):\n        return \"Bau\"\n\n\nclass Gatto(Animale):\n    def emetti_suono(self):\n        return \"Miao\"\n\n\ncane = Cane()\ngatto = Gatto()\nprint(cane.emetti_suono())  # Output: Bau\nprint(gatto.emetti_suono())  # Output: Miao\n</code></pre>"},{"location":"material/classes.html#esercizio-8","title":"Esercizio 8","text":"<p>Crea una classe <code>Frazione</code> che rappresenti una frazione matematica. La classe deve avere due attributi, <code>numeratore</code> e <code>denominatore</code>. Aggiungi un metodo <code>riduci</code> che riduca la frazione ai minimi termini.</p> Soluzione <pre><code>def mcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nclass Frazione:\n    def __init__(self, numeratore, denominatore):\n        self.numeratore = numeratore\n        self.denominatore = denominatore\n\n    def riduci(self):\n        divisore = mcd(self.numeratore, self.denominatore)\n        self.numeratore //= divisore\n        self.denominatore //= divisore\n\n    def __str__(self):\n        return f\"{self.numeratore}/{self.denominatore}\"\n\n\nfrazione = Frazione(150, 100)\nfrazione.riduci()\nprint(frazione)  # Output: 3/2\n</code></pre>"},{"location":"material/collections.html","title":"Collezioni","text":""},{"location":"material/collections.html#ordine-e-mutabilita","title":"Ordine e mutabilit\u00e0","text":"<p>Le collezioni sono strutture dati che servono a contenere pi\u00f9 oggetti al loro interno. Si distinguono in mutabili ed immutabili, a seconda che possano essere modificate dopo la loro creazione o meno. Una sequenza pu\u00f2 essere ordinata o non avere un ordine.</p> <p>La tabella sottostante riassume le propriet\u00e0 di ogni tipo di collezione:</p> tipo mutabile ordinata duplicati struttura dizionario s\u00ec no no <code>{a:m, b:n}</code> tupla no s\u00ec s\u00ec <code>(a, b)</code> lista s\u00ec s\u00ec s\u00ec <code>[a, b]</code> insieme no no no <code>{a, b}</code> stringa no s\u00ec s\u00ec <code>ciao</code> <p>Ecco alcuni esempi di collezioni:</p> <pre><code># Lista\nlista_spesa = [\"pane\", \"latte\", \"uova\"]\n\n# Dizionario\ninfo_utente = {\"nome\": \"Luca\", \"et\u00e0\": 32, \"email\": \"luca@example.com\"}\n\n# Insieme\ninsieme_numeri = {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"material/collections.html#accesso-agli-elementi","title":"Accesso agli elementi","text":"<p>In Python, l'accesso agli elementi di una collezione varia a seconda del tipo di collezione. I tipi di collezione principali in Python includono liste, tuple, dizionari e insiemi.</p>"},{"location":"material/collections.html#liste-e-tuple","title":"Liste e Tuple","text":"<p>Liste e tuple sono collezioni ordinate, il che significa che ogni elemento ha un indice basato sulla sua posizione. Gli indici partono da <code>0</code> per il primo elemento, <code>1</code> per il secondo, e cos\u00ec via.</p> <p>Esempio di accesso a una lista:</p> <pre><code>lista = [\"mela\", \"banana\", \"ciliegia\"]\nprint(lista[0])  # stampa 'mela'\nprint(lista[1])  # stampa 'banana'\nprint(lista[-1])  # stampa 'ciliegia', -1 indica l'ultimo elemento\n</code></pre> <p>Esempio di accesso a una tupla:</p> <pre><code>tupla = (\"luned\u00ec\", \"marted\u00ec\", \"mercoled\u00ec\")\nprint(tupla[0])  # stampa 'luned\u00ec'\n</code></pre>"},{"location":"material/collections.html#dizionari","title":"Dizionari","text":"<p>I dizionari in Python sono collezioni non ordinate di coppie chiave-valore. L'accesso agli elementi di un dizionario avviene tramite le chiavi:</p> <pre><code>dizionario = {\"nome\": \"Luca\", \"et\u00e0\": 30}\nprint(dizionario[\"nome\"])  # stampa 'Luca'\n</code></pre> <p>Se si tenta di accedere a una chiave inesistente, Python sollever\u00e0 un'eccezione <code>KeyError</code>. Per evitare questo, si pu\u00f2 usare il metodo <code>get</code>, che restituisce <code>None</code> (o un valore predefinito) se la chiave non esiste.</p> <pre><code>print(dizionario.get(\"professione\", \"Non specificato\"))\n</code></pre>"},{"location":"material/collections.html#insiemi","title":"Insiemi","text":"<p>Gli insiemi (sets) sono collezioni non ordinate e non indicizzate. Non si pu\u00f2 accedere agli elementi di un insieme tramite un indice o una chiave. Tuttavia, \u00e8 possibile iterare su di essi o verificare se un elemento esiste all'interno dell'insieme.</p> <p>Esempio di iterazione su un insieme:</p> <pre><code>insieme = {1, 2, 3}\nfor numero in insieme:\n    print(numero)\n</code></pre> <p>Verificare la presenza di un elemento:</p> <pre><code>if 2 in insieme:\n    print(\"2 \u00e8 presente nell'insieme\")\n</code></pre>"},{"location":"material/collections.html#slicing","title":"Slicing","text":"<p>Lo slicing \u00e8 una caratteristica in Python che permette di accedere a una sotto-sequenza da una sequenza come una lista, una tupla o una stringa. Lo slicing si effettua utilizzando la sintassi sequenza[inizio:fine:passo], dove inizio \u00e8 l'indice iniziale (incluso), fine \u00e8 l'indice finale (escluso), e passo \u00e8 il numero di elementi da saltare.</p> <pre><code># Liste\nlista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Slicing di base\nsottolista = lista[2:5]  # [2, 3, 4]\n\n# Slicing con passo\nsottolista_con_passo = lista[1:8:2]  # [1, 3, 5, 7]\n\n# Slicing negativo\nsottolista_negativa = lista[-5:-2]  # [5, 6, 7]\n\n# Slicing con indice di inizio o fine omesso\ninizio_omesso = lista[:4]  # [0, 1, 2, 3]\nfine_omessa = lista[6:]  # [6, 7, 8, 9]\n\n# Stringhe\nstringa = \"Python Programming\"\n\n# Slicing di base su una stringa\nsottostringa = stringa[7:18]  # \"Programming\"\n\n# Slicing con passo su una stringa\nsottostringa_con_passo = stringa[0:6:2]  # \"Pto\"\n\n# Tuple\ntupla = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n# Slicing di base su una tupla\nsottotupla = tupla[3:7]  # (3, 4, 5, 6)\n\n# Slicing inverso su una tupla\nsottotupla_inversa = tupla[::-1]  # (9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n</code></pre>"},{"location":"material/collections.html#continuazione-di-linea","title":"Continuazione di linea","text":"<p>Quando si scrive del codice lungo, \u00e8 possibile continuare una linea utilizzando il carattere di continuazione <code>\\</code> alla fine della linea da spezzare. Tuttavia, all'interno di parentesi (tonde, quadre o graffe), Python consente la continuazione automatica senza la necessit\u00e0 di utilizzare il carattere <code>\\</code>, semplificando la scrittura di codice su pi\u00f9 righe senza compromettere la leggibilit\u00e0.</p> <pre><code>lunga_stringa = (\n    \"Questa \u00e8 una lunga stringa che possiamo \"\n    \"continuare su pi\u00f9 righe utilizzando il carattere di continuazione.\"\n)\n\nlunga_lista = [\n    \"elemento1\",\n    \"elemento2\",\n    \"elemento3\",\n    \"elemento4\",\n    \"elemento5\",\n]\n</code></pre>"},{"location":"material/collections.html#esercizi","title":"Esercizi","text":""},{"location":"material/collections.html#esercizio-1","title":"Esercizio 1","text":"<p>Crea una tupla contenente i mesi dell'anno e un insieme contenente i giorni della settimana.</p> Soluzione <pre><code># Tupla dei mesi\nmesi = (\n    \"gennaio\",\n    \"febbraio\",\n    \"marzo\",\n    \"aprile\",\n    \"maggio\",\n    \"giugno\",\n    \"luglio\",\n    \"agosto\",\n    \"settembre\",\n    \"ottobre\",\n    \"novembre\",\n    \"dicembre\",\n)\n\n# Insieme dei giorni\ngiorni = {\"luned\u00ec\", \"marted\u00ec\", \"mercoled\u00ec\", \"gioved\u00ec\", \"venerd\u00ec\", \"sabato\", \"domenica\"}\n</code></pre>"},{"location":"material/collections.html#esercizio-2","title":"Esercizio 2","text":"<p>Dato il seguente dizionario e lista, accedi a specifici elementi come indicato:</p> <pre><code># Dizionario\nstudente = {\"nome\": \"Giovanni\", \"et\u00e0\": 21, \"corso\": \"Informatica\"}\n\n# Lista\nnumeri = [10, 20, 30, 40, 50]\n\n# Accesso agli elementi:\n# 1. Stampa l'et\u00e0 dello studente dal dizionario\n# 2. Stampa il terzo elemento della lista numeri\n</code></pre> Soluzione <pre><code># Soluzione 1\nprint(studente[\"et\u00e0\"])\n\n# Soluzione 2\nprint(numeri[2])\n</code></pre>"},{"location":"material/collections.html#esercizio-3","title":"Esercizio 3","text":"<p>Stampa il penultimo carattere della stringa <code>\"Python\"</code>.</p> Soluzione <pre><code>parola = \"Python\"\nprint(parola[-2])  # Stampa 'o'\n</code></pre>"},{"location":"material/collections.html#esercizio-4","title":"Esercizio 4","text":"<p>Crea una lista contenente i primi cinque numeri pari e usa lo slicing per stampare gli ultimi tre elementi.</p> Soluzione <pre><code>numeri_pari = [2, 4, 6, 8, 10]\nprint(numeri_pari[-3:])  # Stampa [6, 8, 10]\n</code></pre>"},{"location":"material/collections.html#esercizio-5","title":"Esercizio 5","text":"<p>Dato il dizionario <code>{\"Italia\": \"Roma\", \"Francia\": \"Parigi\", \"Germania\": \"Berlino\"}</code>, accedi al valore associato alla chiave <code>\"Francia\"</code>.</p> Soluzione <pre><code>capitali = {\"Italia\": \"Roma\", \"Francia\": \"Parigi\", \"Germania\": \"Berlino\"}\nprint(capitali[\"Francia\"])  # Stampa 'Parigi'\n</code></pre>"},{"location":"material/collections.html#esercizio-6","title":"Esercizio 6","text":"<p>Dato l'insieme <code>{1, 3, 5, 7, 9}</code>, verifica se il numero <code>4</code> \u00e8 presente nell'insieme.</p> Soluzione <pre><code>numeri = {1, 3, 5, 7, 9}\nprint(4 in numeri)  # Stampa False\n</code></pre>"},{"location":"material/control_flow.html","title":"Flusso di controllo","text":""},{"location":"material/control_flow.html#indentazione","title":"Indentazione","text":"<p>Prima ancora di iniziare a vedere gli elementi fondamentali che costituiscono un programma, \u00e8 fondamentale capire il ruolo che l'indentazione gioca in Python. A differenza di altri linguaggi che utilizzano le parentesi o le graffe per definire i blocchi di codice, Python utilizza l'indentazione per organizzare e delimitare i blocchi di istruzioni. L'indentazione per convenzione \u00e8 fatta con quattro spazi:</p> <pre><code>def mia_funzione():\n    for elemento in lista:\n        # Operazioni all'interno del for loop\n        if condizione:\n            print(\"Condizione soddisfatta\")\n        else:\n            print(\"Condizione non soddisfatta\")\n</code></pre>"},{"location":"material/control_flow.html#branching","title":"Branching","text":"<p>Il branching \u00e8 la possibilit\u00e0 di esecuzione condizionale del codice, vale a dire la possibilit\u00e0 di deviare l'esecuzione del codice verso percorsi alternativi:</p> <pre><code>if condizione_1:\n    print(\"Condizione 1 soddisfatta\")\nelif condizione_2:\n    print(\"Condizione 1 non soddisfatta, ma condizione 2 soddisfatta\")\nelse:\n    print(\"Nessuna condizione soddisfatta\")\n</code></pre> <p>Viene eseguito il blocco di codice corrispondente alla prima condizione che risulta vera. Se nessuna condizione \u00e8 verificata allora \u00e8 eseguito il blocco corrispondente alla clausola <code>else</code>. Ad esempio:</p> <pre><code>et\u00e0 = 18\nif et\u00e0 &lt; 18:\n    print(\"Minorenne\")\nelif et\u00e0 &gt;= 18 and et\u00e0 &lt; 65:\n    print(\"Adulto\")\nelse:\n    print(\"Anziano\")\n</code></pre> <p>Quando si deve assegnare condizionalmente un valore ad un nome in accordo ad una certa condizione si pu\u00f2 abbreviare il codice usando l'operatore ternario.</p> <pre><code>messaggio = \"Buongiorno\" if ora &lt; 12 else \"Buonasera\"\nprint(messaggio)\n</code></pre>"},{"location":"material/control_flow.html#looping","title":"Looping","text":"<p>Il looping \u00e8 la possibilit\u00e0 di eseguire ripetutamente uno stesso blocco di codice. I cicli <code>for</code> consentono di eseguire il codice per un dato numero di volte, mentre i cicli <code>while</code> consentono di ripetere l'esecuzione fino a che non si verifica una condizione.</p> <pre><code>for number in [0, 1, 2, 3, 4]:\n    print(number)\n\n# Stesso risultato del ciclo precedente ma usando la funzione `range` che restituisce la collezione\n# dei numeri da 0 al numero passato come argomento, escluso il numero stesso.\nfor i in range(5):\n    print(number)\n\nfor lettera in \"Python\":\n    print(lettera.upper())\n</code></pre> <p>Notare che non \u00e8 necessario che la variabile <code>number</code> sia stata inizializzata in precedenza. \u00c8 possibile iterare su qualsiasi sequenza, non necessariamente numerica.</p> <pre><code>for x in \"ciao!\":\n    print(x, end=\" \")\n</code></pre> <p>Anche gli oggetti pi\u00f9 complessi come le liste di liste possono essere iterati:</p> <pre><code>liste_numeri = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfor lista in liste_numeri:\n    for numero in lista:\n        print(numero)\n</code></pre> <p>Pi\u00f9 in generale l'iterazione \u00e8 possibile su qualsiasi iterabile, ossia qualsiasi oggetto che ha la capacit\u00e0 di restituire i suoi membri uno alla volta. Si pu\u00f2 iterare su pi\u00f9 indici, ad esempio per iterare su tutte le coppie chiave-valore di un dizionario (l'ordine non \u00e8 rispettato perch\u00e8 i dizionari non sono ordinati) .</p> <pre><code>dic = {\"A\": 1, \"B\": 2}\nfor i, j in dic.items():\n    print(i, j)\n</code></pre> <p>Variabili di iterazione</p> <p>Notare come nell'esempio precedente si siano violate le convenzioni sui nomi di variabili per le variabili di iterazione <code>i</code> e <code>j</code> usate nel loop. Questa \u00e8 una pratica comune, dato che le variabili in questione cessano di essere rilevanti una volta terminato il loop, dunque il fatto che abbiano nomi poco parlanti non influenza la chiarezza del codice che segue.</p> <p>Si pu\u00f2 anche iterare su pi\u00f9 sequenze in contemporanea.</p> <pre><code>people = [\"Jonas\", \"Julio\", \"Mike\", \"Mez\"]\nages = [25, 30, 31, 39]\nfor position, person in enumerate(people):\n    age = ages[position]\n    print(person, age)\n\nfor person, age in zip(people, ages):\n    print(person, age)\n</code></pre> <p>Se si vuole eseguire ripetutamente un blocco di codice fino a che una condizione specificata rimane vera si usa invece un ciclo <code>while</code> . Il ciclo seguente continua a stampare il valore di <code>numero</code> finch\u00e9 non diventa 0, decrementando <code>numero</code> di 1 ad ogni iterazione.</p> <pre><code>numero = 5\nwhile numero &gt; 0:\n    print(numero)\n    numero -= 1\n</code></pre> <p>Un loop pu\u00f2 essere seguito da una clausola <code>else</code> che viene eseguita solo se il loop \u00e8 terminato normalmente (ossia se non \u00e8 stato interrotto tramite un <code>break</code>). Il ciclo seguente stampa i numeri 3, 2, 1 e poi \"Raggiunto zero\".</p> <pre><code>numero = 3\nwhile numero &gt; 0:\n    print(numero)\n    numero -= 1\nelse:\n    print(\"Raggiunto zero\")\n</code></pre> <p>Si pu\u00f2 arrestare forzatamente un loop tramite <code>break</code> , oppure interrompere l'iterazione attuale e saltare a quella successiva con <code>continue</code>. In questo esempio, il numero 5 viene saltato a causa di <code>continue</code>, e il ciclo si interrompe quando <code>numero</code> \u00e8 uguale a 3, quindi 3 non viene stampato.</p> <pre><code>numero = 10\nwhile numero &gt; 0:\n    numero -= 1\n    if numero == 5:\n        continue\n    if numero == 3:\n        break\n    print(numero)\n</code></pre>"},{"location":"material/control_flow.html#comprensioni-di-lista","title":"Comprensioni di lista","text":"<p>Le comprensioni di lista (list comprehensions) sono un modo potente e conciso in Python per creare nuove collezioni (come liste, dizionari, insiemi) a partire da collezioni esistenti. Ad esempio, possiamo creare una lista con i quadrati dei numeri da 1 a 10:</p> <pre><code>quadrati = [x**2 for x in range(1, 11)]\n</code></pre> <p>Nonostante il nome, le comprensioni di lista possono essere usate per creare collezioni di qualsiasi tipo, ad esempio possiamo creare un dizionario che mappa i numeri dispari fino a 10 ai rispettivi quadrati.</p> <pre><code>quadrati_dispari = {x: x**2 for x in range(1, 11) if x % 2 != 0}\n</code></pre> <p>Anche gli insiemi possono essere creati tramite comprensioni. Per esempio, possiamo generare un insieme dei resti della divisione per 5 di numeri da 1 a 10:</p> <pre><code>resti = {x % 5 for x in range(1, 11)}\n</code></pre> <p>Le comprensioni sono uno degli strumenti pi\u00f9 potenti di Python perch\u00e9 consentono di scrivere cicli in maniera estremamente coincisa.</p>"},{"location":"material/control_flow.html#bonus-eccezioni","title":"Bonus: Eccezioni","text":"<p>Le eccezioni in Python sono eventi che si verificano durante l'esecuzione del programma e che interrompono il normale flusso delle istruzioni. Quando si verifica un errore nel codice, Python genera un'eccezione. Questo pu\u00f2 accadere per vari motivi, come un accesso a un indice di una lista che non esiste, la divisione per zero, o un errore di sintassi.</p> <p>Le eccezioni sono importanti perch\u00e9 permettono ai programmatori di gestire gli errori in modo controllato e di prevenire il blocco o il comportamento imprevisto del programma. Python offre la possibilit\u00e0 di gestire le eccezioni attraverso i blocchi <code>try</code> e <code>except</code>.</p> <pre><code>try:\n    # Codice che potrebbe generare un'eccezione\n    risultato = 10 / 0\nexcept ZeroDivisionError:\n    # Codice eseguito in caso di ZeroDivisionError\n    print(\"Non \u00e8 possibile dividere per zero\")\n</code></pre> <p>Nell'esempio sopra, se il codice all'interno del blocco <code>try</code> causa un'eccezione <code>ZeroDivisionError</code>, il programma non si blocca, ma esegue il codice all'interno del blocco <code>except</code>.</p> <p>\u00c8 possibile gestire pi\u00f9 tipi di eccezioni in un unico blocco <code>except</code> o avere pi\u00f9 blocchi <code>except</code> per gestire diversi tipi di eccezioni.</p> <pre><code>try:\n    # Codice che potrebbe generare diverse eccezioni\n    lista = [1, 2, 3]\n    print(lista[3])\nexcept IndexError:\n    print(\"Indice non presente nella lista\")\nexcept Exception as e:\n    print(\"Errore: \", e)\n</code></pre> <p>In questo esempio, se il codice nel blocco <code>try</code> genera un'eccezione <code>IndexError</code>, verr\u00e0 eseguito il primo blocco <code>except</code>. Se si verifica un altro tipo di eccezione, verr\u00e0 catturato dal secondo blocco <code>except</code>, che stampa un messaggio generico.</p> <p>Infine, \u00e8 possibile utilizzare anche i blocchi <code>else</code> e <code>finally</code> in combinazione con <code>try</code> e <code>except</code>. Il blocco <code>else</code> viene eseguito se non si verifica nessuna eccezione, mentre <code>finally</code> viene eseguito sempre, sia che si verifichi un'eccezione, sia che non si verifichi, utilizzato spesso per operazioni di pulizia, come la chiusura di file o connessioni a database.</p> <pre><code>try:\n    # Codice che potrebbe generare un'eccezione\n    numero = int(\"abc\")\nexcept ValueError:\n    print(\"Errore di conversione\")\nelse:\n    print(\"Nessuna eccezione\")\nfinally:\n    print(\"Esecuzione blocco finally\")\n</code></pre> <p>La gestione delle eccezioni \u00e8 un aspetto cruciale nella scrittura di codice robusto e resistente agli errori, specialmente in applicazioni complesse o che interagiscono con sistemi esterni dove i comportamenti imprevisti sono comuni.</p> <p> </p> <p>A software engineer walks into a bar. Orders a beer. Orders 0 beers. Orders 99999999999 beers. Orders a lizard. Orders -1 beers. Orders a ueicbksjdhd.</p> <p>First real customer walks in and asks where the bathroom is. The bar bursts into flames, killing everyone.</p>"},{"location":"material/control_flow.html#esercizi","title":"Esercizi","text":""},{"location":"material/control_flow.html#esercizio-1","title":"Esercizio 1","text":"<p>Riesci a capire cosa fa ciascun ciclo?</p> <pre><code>for i in range(5):\n    print(i)\n    if i == 2:\n        break\n</code></pre> <pre><code>for i in range(5):\n    if i == 2:\n        continue\n    print(i)\n</code></pre> <pre><code>for i in range(5):\n    print(i)\nelse:\n    print(\"Loop terminato normalmente\")\n</code></pre> Soluzione <ul> <li>Il primo ciclo stampa i numeri da 0 a 2 e poi si interrompe a causa del break.</li> <li>Il secondo ciclo salta il numero 2 grazie al continue e stampa gli altri numeri da 0 a 4.</li> <li>Nel terzo ciclo, viene stampato ogni numero da 0 a 4, e poi, poich\u00e9 il ciclo termina normalmente, viene stampato il messaggio.</li> </ul>"},{"location":"material/control_flow.html#esercizio-2","title":"Esercizio 2","text":"<p>Scrivi un programma che trova il numero massimo in una lista di numeri. La lista pu\u00f2 essere definita direttamente nel codice. Non utilizzare funzioni predefinite.</p> <p>Esempio di lista: <code>numeri = [3, 5, 7, 2, 8, 10, 1]</code></p> Soluzione <pre><code>numeri = [3, 5, 7, 2, 8, 10, 1]\nnumero_massimo = numeri[0]\n\nfor numero in numeri:\n    if numero &gt; numero_massimo:\n        numero_massimo = numero\n\nprint(f\"Il numero massimo nella lista \u00e8: {numero_massimo}\")\n</code></pre>"},{"location":"material/control_flow.html#esercizio-3","title":"Esercizio 3","text":"<p>Scrivi un programma che conta quante vocali (a, e, i, o, u) ci sono nella stringa <code>\"Ciao, benvenuto nel mondo della programmazione!\"</code>.</p> Soluzione <pre><code>testo = \"Ciao, benvenuto nel mondo della programmazione!\"\nvocali = \"aeiou\"\nconteggio = 0\n\nfor carattere in testo:\n    if carattere.lower() in vocali:\n        conteggio += 1\n\nprint(f\"Ci sono {conteggio} vocali nella stringa.\")\n</code></pre>"},{"location":"material/control_flow.html#bonus-esercizio-4","title":"Bonus: Esercizio 4","text":"<p>Crea un semplice gioco che genera un numero casuale tra 1 e 10 e chiede all'utente di indovinarlo utilizzando la funzione <code>input()</code>. Il programma deve dare un feedback all'utente dopo ogni tentativo, indicando se il numero indovinato \u00e8 troppo alto o troppo basso. Il gioco termina quando l'utente indovina il numero o dopo 3 tentativi.</p> <p>Validazione degli input</p> <p>La funzione <code>input()</code> \u00e8 utilizzata per raccogliere l'input dell'utente. Quando chiami <code>input()</code>, il programma si ferma e attende che l'utente digiti qualcosa e prema invio. La stringa inserita dall'utente viene poi restituita dalla funzione e pu\u00f2 essere convertita in un altro tipo di dato se necessario, ad esempio in un intero con <code>int()</code>. Ma come assicurarsi che l'utente abbia inserito un numero? Dobbiamo usare un blocco <code>except</code> che intercetti un eventuale <code>ValueError</code>.</p> Soluzione <pre><code>NUMERO_SEGRETO = 7  # Modificare per cambiare la soluzione\ntentativi = 0\n\nwhile tentativi &lt; 3:\n    try:\n        guess = int(input(\"Indovina il numero (tra 1 e 10): \"))\n        tentativi += 1\n\n        if guess == NUMERO_SEGRETO:\n            print(f\"Hai indovinato! Il numero era {NUMERO_SEGRETO}.\")\n            break\n        elif guess &lt; NUMERO_SEGRETO:\n            print(\"Troppo basso!\")\n        else:\n            print(\"Troppo alto!\")\n    except ValueError:\n        print(\"Per favore, inserisci un numero valido.\")\n\n    if tentativi == 3:\n        print(f\"Hai finito i tentativi. Il numero era {NUMERO_SEGRETO}.\")\n</code></pre>"},{"location":"material/ecosystem.html","title":"Ecosistema Python","text":""},{"location":"material/ecosystem.html#librerie","title":"Librerie","text":"<p>Quando si sviluppa un progetto in Python, solo una piccola parte del codice viene scritto dallo sviluppatore per lo specifico progetto. La maggior parte del codice \u00e8 invece costituito dalle librerie.</p> <p>Una libreria \u00e8 un insieme di codice riutilizzabile condiviso da terze parti che offre funzioni, classi e metodi che afferiscono ad uno stesso argomento, come l'analisi dei dati, la grafica, o la comunicazione di rete. Ad esempio, <code>matplotlib</code> \u00e8 una libreria per la creazione di grafici.</p> <p>Le librerie sono composte da moduli, organizzati in pacchetti. L'insieme delle librerie usate da un progetto costituiscono le sue dipendenze.</p>"},{"location":"material/ecosystem.html#moduli","title":"Moduli","text":"<p>Un modulo \u00e8 un file Python (con estensione <code>.py</code>) che contiene definizioni e implementazioni di funzioni, classi e variabili. I moduli possono essere importati e utilizzati in altri moduli o script Python. Ad esempio, il modulo <code>math</code> in Python fornisce accesso a funzioni matematiche.</p> <pre><code># Importazione dell'intero modulo math\nimport math\n\n# Utilizzo di una funzione specifica dal modulo math\nprint(math.sqrt(16))  # Output: 4.0\n\n# Importazione di specifici elementi (sqrt e pi) dal modulo math\nfrom math import sqrt, pi\n\n# Utilizzo delle funzioni importate direttamente\nprint(sqrt(25))  # Output: 5.0\nprint(pi)  # Output: 3.1415...\n\n# Importazione di un modulo con un alias (numpy come np)\nimport numpy as np\n\n# Utilizzo di funzioni di numpy usando l'alias\narray = np.array([1, 2, 3])\nprint(array)  # Output: [1 2 3]\n\n# Importazione di un sottomodulo con alias (datetime da datetime)\nfrom datetime import datetime as dt\n\n# Utilizzo del sottomodulo datetime per ottenere la data e l'ora corrente\ncurrent_time = dt.now()\nprint(current_time)  # Output: (data e ora correnti)\n\n# Utilizzo del sottomodulo per formattare date\nformatted_date = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(formatted_date)  # Output: (data e ora correnti formattate)\n</code></pre>"},{"location":"material/ecosystem.html#pacchetti","title":"Pacchetti","text":"<p>Un pacchetto \u00e8 una raccolta di moduli Python. Mentre un modulo \u00e8 un singolo file Python, un pacchetto \u00e8 una directory che contiene file Python e un file speciale chiamato <code>__init__.py</code>. Questo file indica che la directory \u00e8 un pacchetto Python, che pu\u00f2 includere sotto-pacchetti e moduli. Per esempio, <code>numpy</code> \u00e8 un pacchetto popolare per il calcolo numerico.</p>"},{"location":"material/ecosystem.html#gestore-di-pacchetti","title":"Gestore di pacchetti","text":"<p>Un gestore di pacchetti (package manager) \u00e8 uno strumento che automatizza il processo di installazione, aggiornamento, configurazione e rimozione di pacchetti software da un archivio di pacchetti. In Python, il gestore di pacchetti pi\u00f9 comune \u00e8 <code>pip</code>. Con <code>pip</code>, \u00e8 possibile installare pacchetti da PyPI (Python Package Index), un repository di software per la programmazione in Python.</p> <pre><code># Installs matplotlib\npip install matplotlib\n</code></pre>"},{"location":"material/ecosystem.html#versionamento","title":"Versionamento","text":"<p>Le librerie vengono costantemente modificate, dunque \u00e8 importante considerare la versione di una libreria che si sta utilizzando. La versione \u00e8 tipicamente espressa secondo una convenzione detta di versionamento semantico, che prevede di assegnare a ciascuna versione un numero nel formato seguente:</p> <pre><code>major.minor.patch\n</code></pre> <p>Una patch version introduce solo fix di bug, una minor version introduce nuove funzionalit\u00e0 mentre una major version segnala cambiamenti radicali che possono introdurre regressioni.</p>"},{"location":"material/ecosystem.html#ambienti-virtuali","title":"Ambienti virtuali","text":"<p>Il versionamento delle librerie fa emergere un problema: cosa succede se si lavora a pi\u00f9 di un progetto sulla stessa macchina? Supponiamo di sviluppare due progetti <code>A</code> e <code>B</code> e che entrambi abbiano bisogno della libreria <code>mylib</code>. Immaginiamo che la libreria <code>mylib</code> venga aggiornata e passi dalla versione <code>1.2.3</code> alla versione <code>2.0.0</code>, dalle regole del versionamento semantico sappiamo che questo significa che potrebbero esserci regressioni. Come ci si deve comportare se il progetto <code>A</code> non pu\u00f2 aggiornare la libreria perch\u00e9 impattato da tali regressioni mentre il progetto <code>B</code> vuole aggiornare la libreria per avvantaggiarsi delle nuove funzionalit\u00e0 introdotte?</p> <p>L'esempio sopra fa intuire come ciascun progetto debba essere accompagnato da una copia di tutte le librerie di cui ha bisogno, ciascuna libreria alla specifica versione che meglio risponde alle esigenze del progetto. Non basta: Python stesso deve essere alla specifica versione di cui il progetto ha bisogno, dato che il discorso fatto sulle librerie si estende al linguaggio stesso.</p> <p>Un ambiente virtuale (virtual environment o venv) \u00e8 uno strumento che permette di mantenere separate le dipendenze richieste da diversi progetti. In parole semplici, \u00e8 come avere un cassetto per ciascun progetto, ciascuno dei quali pu\u00f2 contenere i suoi propri strumenti, indipendentemente dal contenuto degli altri. Gli ambienti virtuali sono gestiti da uno strumento apposito, per esempio <code>conda</code>, <code>virtualenv</code> o <code>pyenv</code>.</p> <p>Poetry, che abbiamo installato all'inizio, consente di creare facilmente ambienti virtuali. Per farlo apriamo il terminale integrato in VSCode (<code>Terminal</code> <code>New terminal</code>) quindi eseguiamo i seguenti comandi:</p> <pre><code># Creiamo un nuovo progetto\npoetry new myproject\n# Spostiamoci all'interno della cartella del progetto\ncd myproject\n# Entriamo nell'ambiente virtuale\npoetry shell\n# Installiamo qualche libreria\npoetry add matplotlib pandas\n</code></pre>"},{"location":"material/ecosystem.html#jupyter","title":"Jupyter","text":"<p>Un notebook Jupyter \u00e8 un documento composto da una serie di \"celle\", che possono contenere codice, testo formattato, equazioni o visualizzazioni. Contrariamente ad uno script, che viene eseguito per intero quando lanciato, un notebook Jupyter viene eseguito una cella per volta. Una cella pu\u00f2 essere eseguita pi\u00f9 volte, cancellata, spostata, ignorata, etc. Per lavorare con i notebook Jupyter in VSCode, installare la relativa estensione. Per eseguire una cella di codice, premere il pulsante \"Run Cell\" che appare quando si passa il mouse sopra la cella o premere <code>Shift + Enter</code>.</p>"},{"location":"material/functions.html","title":"Funzioni","text":"<p>Una funzione \u00e8 un blocco di codice che viene eseguito solo quando viene chiamato. Le funzioni sono utili per scomporre compiti complessi in parti pi\u00f9 piccole e gestibili, rendendo il codice pi\u00f9 organizzato, riutilizzabile e pi\u00f9 facile da testare.</p>"},{"location":"material/functions.html#definizione-e-chiamata","title":"Definizione e Chiamata","text":"<p>Per definire una funzione in Python, si utilizza la parola chiave <code>def</code>, seguita dal nome della funzione e una coppia di parentesi. All'interno delle parentesi, si possono definire i parametri (o argomenti) che la funzione pu\u00f2 accettare.</p> <pre><code>def saluta(nome):\n    print(f\"Ciao, {nome}!\")\n</code></pre> <p>Per chiamare una funzione, si utilizza il nome della funzione seguito dalle parentesi contenenti eventuali argomenti necessari.</p> <pre><code>saluta(\"Luca\")  # Output: Ciao, Luca!\n</code></pre>"},{"location":"material/functions.html#valori-di-ritorno","title":"Valori di ritorno","text":"<p>Le funzioni possono anche restituire valori. Per farlo, si utilizza la parola chiave <code>return</code>. Il valore dopo <code>return</code> sar\u00e0 il risultato della funzione.</p> <pre><code>def somma(a, b):\n    return a + b\n\n\nrisultato = somma(5, 3)  # risultato \u00e8 8\n</code></pre>"},{"location":"material/functions.html#passare-argomenti","title":"Passare argomenti","text":"<p>Passare un argomento alla funzione significa sostanzialmente assegnare un nome locale ad un oggetto. Qui, <code>x</code> \u00e8 un oggetto immutabile (un intero). Quando passiamo <code>x</code> alla funzione <code>mostra_valore</code>, <code>a</code> diventa semplicemente un altro nome per lo stesso valore a cui <code>x</code> fa riferimento, cio\u00e8 10. Tuttavia, qualsiasi modifica a <code>a</code> all'interno della funzione non influenzer\u00e0 <code>x</code>.</p> <pre><code>def mostra_valore(a):\n    print(\"Valore all'interno della funzione:\", a)\n\n\nx = 10\nmostra_valore(x)  # Output: Valore all'interno della funzione: 10\n</code></pre> <p>Possiamo verificare che quanto detto sia vero usando l'operatore <code>is</code>:</p> <pre><code>def ritorna_valore(a):\n    return a\n\n\nx = 10\ny = ritorna_valore(x)\n\nprint(y is x)  # True\n</code></pre> <p>Ora, osserviamo cosa accade quando passiamo un oggetto mutabile, come una lista:</p> <pre><code>lista = [1, 2, 3]\n\n\ndef modifica_lista(l):\n    l[0] = 99\n    print(\"Lista all'interno della funzione:\", l)\n\n\nmodifica_lista(lista)\nprint(\"Lista dopo la chiamata della funzione:\", lista)\n</code></pre> <p>Output:</p> <pre><code>Lista all'interno della funzione: [99, 2, 3]\nLista dopo la chiamata della funzione: [99, 2, 3]\n</code></pre> <p>In questo esempio, <code>lista</code> \u00e8 una lista (un oggetto mutabile). Quando passiamo <code>lista</code> alla funzione <code>modifica_lista</code>, il parametro <code>l</code> all'interno della funzione punta allo stesso oggetto a cui punta <code>lista</code>. Pertanto, qualsiasi modifica fatta a <code>l</code> (come <code>l[0] = 99</code>) si rifletter\u00e0 direttamente su <code>lista</code> nel contesto globale.</p> <p>Questo comportamento sottolinea l'importanza di essere consapevoli del tipo di oggetti (mutabili vs. immutabili) quando si lavora con funzioni in Python, in quanto ci\u00f2 determina se le modifiche all'interno della funzione avranno effetti sulle variabili nel contesto esterno.</p>"},{"location":"material/functions.html#tipi-di-argomenti","title":"Tipi di Argomenti","text":"<p>Ci sono diverse modalit\u00e0 di passaggio degli argomenti:</p> <ol> <li>Argomenti Posizionali: Il valore di ogni argomento \u00e8 basato sulla sua posizione.</li> <li> <p>Argomenti con Parola Chiave (Keyword Arguments): \u00c8 possibile passare argomenti utilizzando il nome del parametro, rendendo l'ordine degli argomenti irrilevante.</p> <pre><code>def descrivi_animali(tipo, nome):\n    print(f\"Tipo: {tipo}, Nome: {nome}\")\n\n\ndescrivi_animali(nome=\"Fido\", tipo=\"Cane\")  # L'ordine degli argomenti non conta\n</code></pre> </li> <li> <p>Argomenti Predefiniti: Possiamo assegnare valori predefiniti ai parametri. Se un argomento per quel parametro non viene fornito nella chiamata, verr\u00e0 usato il valore predefinito.</p> <pre><code>def descrivi_libro(titolo, autore=\"Sconosciuto\"):\n    print(f\"Libro: {titolo}, Autore: {autore}\")\n\n\ndescrivi_libro(\"Il Grande Gatsby\")  # Autore sar\u00e0 \"Sconosciuto\"\n</code></pre> </li> <li> <p>Argomenti Variadici: A volte non sappiamo in anticipo quanti argomenti verranno passati alla funzione. In questi casi, usiamo *args (per liste di argomenti) e **kwargs (per dizionari di argomenti).</p> <pre><code>def somma(*numeri):\n    return sum(numeri)\n\n\nprint(somma(1, 2, 3, 4))  # Possiamo passare quanti numeri vogliamo\n</code></pre> </li> </ol>"},{"location":"material/functions.html#esercizi","title":"Esercizi","text":""},{"location":"material/functions.html#esercizio-1","title":"Esercizio 1","text":"<p>Scrivi una funzione chiamata <code>doppio</code> che prenda un numero come argomento e restituisca il suo doppio.</p> Soluzione <pre><code>def doppio(numero):\n    return numero * 2\n\n\n# Esempio di chiamata della funzione\nprint(doppio(4))  # Output: 8\n</code></pre>"},{"location":"material/functions.html#esercizio-2","title":"Esercizio 2","text":"<p>Crea una funzione <code>saluta_mondo</code> che non accetta argomenti e stampa semplicemente \"Ciao Mondo!\".</p> Soluzione <pre><code>def saluta_mondo():\n    print(\"Ciao Mondo!\")\n\n\nsaluta_mondo()  # Output: Ciao Mondo!\n</code></pre>"},{"location":"material/functions.html#esercizio-3","title":"Esercizio 3","text":"<p>Definisci una funzione <code>massimo</code> che prenda due numeri come argomenti e restituisca il maggiore dei due.</p> Soluzione <pre><code>def massimo(a, b):\n    return a if a &gt; b else b\n\n\nprint(massimo(3, 7))  # Output: 7\n</code></pre>"},{"location":"material/functions.html#esercizio-4","title":"Esercizio 4","text":"<p>Scrivi una funzione <code>presentati</code> che prenda due argomenti, nome e cognome, e stampi \"Mi chiamo [nome] [cognome]\".</p> Soluzione <pre><code>def presentati(nome, cognome):\n    print(f\"Mi chiamo {nome} {cognome}\")\n\n\npresentati(\"Mario\", \"Rossi\")  # Output: Mi chiamo Mario Rossi\n</code></pre>"},{"location":"material/functions.html#esercizio-5","title":"Esercizio 5","text":"<p>Crea una funzione <code>media</code> che prenda un numero arbitrario di valori numerici e restituisca la loro media. Usa gli argomenti variadici.</p> Soluzione <pre><code>def media(*numeri):\n    return sum(numeri) / len(numeri) if numeri else 0\n\n\nprint(media(1, 2, 3, 4, 5))  # Output: 3.0\n</code></pre>"},{"location":"material/functions.html#esercizio-6","title":"Esercizio 6","text":"<p>Definisci una funzione <code>saluta_opzionale</code> che accetti un nome come argomento e un argomento opzionale <code>messaggio</code>, con valore predefinito \"Ciao\". La funzione deve stampare \"[messaggio], [nome]!\".</p> Soluzione <pre><code>def saluta_opzionale(nome, messaggio=\"Ciao\"):\n    print(f\"{messaggio}, {nome}!\")\n\n\nsaluta_opzionale(\"Luca\")  # Output: Ciao, Luca!\nsaluta_opzionale(\"Luca\", \"Benvenuto\")  # Output: Benvenuto, Luca!\n</code></pre>"},{"location":"material/functions.html#esercizio-7","title":"Esercizio 7","text":"<p>Scrivi una funzione <code>conta_vocali</code> che prenda una stringa come argomento e restituisca il numero totale di vocali (sia maiuscole che minuscole) in quella stringa.</p> Soluzione <pre><code>def conta_vocali(testo):\n    vocali = \"aeiouAEIOU\"\n    return sum(1 for lettera in testo if lettera in vocali)\n\n\nprint(conta_vocali(\"Ciao Mondo\"))  # Output: 5\n</code></pre>"},{"location":"material/functions.html#esercizio-8","title":"Esercizio 8","text":"<p>Scrivi una funzione <code>cifra_numeri</code> che prenda una stringa come input e sostituisca ogni cifra numerica (0-9) nella stringa con il corrispondente numero in parole. Per esempio, \"ho 2 gatti e 1 cane\" diventa \"ho due gatti e uno cane\".</p> Soluzione <pre><code>def cifra_numeri(testo):\n    numeri_parole = [\n        \"zero\",\n        \"uno\",\n        \"due\",\n        \"tre\",\n        \"quattro\",\n        \"cinque\",\n        \"sei\",\n        \"sette\",\n        \"otto\",\n        \"nove\",\n    ]\n    return \"\".join(numeri_parole[int(c)] if c.isdigit() else c for c in testo)\n\n\nprint(cifra_numeri(\"ho 2 gatti e 1 cane\"))  # Output: ho due gatti e uno cane\n</code></pre>"},{"location":"material/functions.html#esercizio-9","title":"Esercizio 9","text":"<p>Crea una funzione <code>frequenza_parole</code> che prenda una stringa come input e restituisca un dizionario con ogni parola unica nella stringa come chiave e il numero di volte in cui appare quella parola come valore. Assume che le parole siano separate da spazi e che la punteggiatura non sia importante.</p> Soluzione <pre><code>def frequenza_parole(testo):\n    parole = testo.lower().split()\n    frequenze = {}\n    for parola in parole:\n        frequenze[parola] = frequenze.get(parola, 0) + 1\n    return frequenze\n\n\nprint(frequenza_parole(\"Ciao mondo ciao mondo\"))  # Output: {'ciao': 2, 'mondo': 2}\n</code></pre>"},{"location":"material/fundamentals.html","title":"Fondamenti","text":""},{"location":"material/fundamentals.html#commenti","title":"Commenti","text":"<p>La prima cosa da sapere quando si studia un linguaggio di programmazione \u00e8 la sintassi per i commenti. Un commento in programmazione \u00e8 come una nota che si inserisce nel codice per spiegare cosa fa una parte specifica di quel codice. Queste annotazioni non vengono eseguite quando il programma \u00e8 in esecuzione ma sono utili per aiutare i programmatori a comprendere meglio il codice. In Python, \u00e8 possibile inserire un commento inserendo il carattere cancelletto <code>#</code></p> <pre><code># Questo \u00e8 un commento \"in testa\"\nx = 0\ny = 1  # questo invece \u00e8 un commento \"in coda\"\n</code></pre>"},{"location":"material/fundamentals.html#variabili","title":"Variabili","text":"<p>Le variabili sono una componente fondamentale di Python, possono essere pensate come contenitori per memorizzare dati di vario tipo da utilizzare durante l'esecuzione del programma. Come si intuisce dal nome, il valore di una variabile cambia nel corso dell'esecuzione per effetto dell'applicazione di operatori, il pi\u00f9 fondamentale dei quali \u00e8 l'operatore di assegnazione <code>=</code> che cambia il valore della variabile a sinistra dell'operatore con il valore alla sua destra.</p> <pre><code>x = 5  # assegna il valore intero 5 alla variabile x\n</code></pre> <p>Python \u00e8 un linguaggio cosiddetto a tipizzazione dinamica, vale a dire che non \u00e8 necessario dichiarare esplicitamente il tipo della variabile prima di utilizzarla, inoltre si pu\u00f2 cambiare il tipo della variabile quante volte si desidera</p> <pre><code>y = 10  # assegna il valore intero 10 alla variabile\ny = \"ciao\"  # ora y diventa una stringa\n</code></pre> <p>Un programma complesso fa uso di un gran numero di variabili, dunque \u00e8 importante scegliere con cura i nomi delle variabili per evitare confusione. Le regole del linguaggio per i nomi sono:</p> <ul> <li>il nome pu\u00f2 contenere solo lettere, cifre ed il carattere underscore <code>_</code></li> <li>il nome non pu\u00f2 iniziare con una cifra</li> <li>il nome \u00e8 case sensitive, i.e. <code>var</code> e <code>VAR</code> sono due variabili differenti</li> </ul> <p>La convenzione \u00e8 quella di scegliere nomi pi\u00f9 lunghi di due caratteri, scritti tutti in minuscolo ed in formato snake case, ovvero con gli <code>_</code> a rimpiazzare gli spazi. Esistono due eccezioni a queste regole, rappresentate dalle costanti e dalle variabili di iterazione, che vedremo pi\u00f9 avanti.</p> <p>Nomi riservati</p> <p>Ci sono alcuni nomi che, sebbene soddisfino tutte le regole e le convenzioni sopra descritte, non andrebbero usati perch\u00e9 ci sono alcune variabili built-in, cio\u00e8 variabili necessarie a Python per funzionare, con lo stesso nome e.g., <code>type</code>, <code>hash</code>, <code>input</code>, <code>file</code>. Se proprio dovesse piacervi l'idea di chiamare una variabile in questo modo, potete risolvere aggiungendo un <code>_</code> in coda e.g., <code>type_</code>.</p>"},{"location":"material/fundamentals.html#esempio-1","title":"Esempio 1","text":"<p>Supponiamo di dover scegliere i nomi di alcune variabili che devono contenere informazioni anagrafiche di un cliente.</p> <p>Nomi di variabili</p> <p><code>nome_utente</code>, <code>data_registrazione</code>, <code>codice_fiscale</code></p> <p>I nomi nel riquadro verde sono delle buone scelte in quanto sono, come si suol dire, parlanti ovvero non \u00e8 in dubbio a cosa esattamente facciano riferimento. Sono inoltre scritti tutti in minuscolo, in snake case e sufficientemente lunghi.</p>"},{"location":"material/fundamentals.html#costanti","title":"Costanti","text":"<p>Le costanti in Python sono molto semplici da comprendere, dato che non esistono. Sebbene il linguaggio non preveda esplicitamente la possibilit\u00e0 di creare delle costanti, si possono usare delle normali variabili facendo attenzione a che il valore non venga mai alterato dopo l'assegnazione iniziale. Per facilitare questo compito, si usa assegnare loro nomi che seguono tutte le convenzioni sui nomi delle variabili eccetto una: sono tutti in maiuscolo invece che in minuscolo.</p> <pre><code>PI_GRECO = 3.14159  # costante di Archimede\nALPHA = 1 / 137  # costante di struttura fine\n</code></pre>"},{"location":"material/fundamentals.html#tipi-di-dati","title":"Tipi di dati","text":"<p>Il tipo di dato (datatype) di una variabile stabilisce le operazioni che \u00e8 possibile effettuare su di essa. I tipi fondamentali in Python sono:</p> <ol> <li>int: rappresenta i numeri interi;</li> <li>float: rappresenta i numeri decimali in virgola mobile (floating point, da cui il nome);</li> <li>complex: rappresenta i numeri complessi, l'unit\u00e0 immaginaria \u00e8 indicata con <code>j</code>;</li> <li>bool: rappresenta un valore di verit\u00e0 (<code>True</code> oppure <code>False</code>);</li> <li>stringa: rappresenta una sequenza di caratteri racchiusa tra apici singoli <code>'</code> o doppi <code>\"</code>.</li> </ol>"},{"location":"material/fundamentals.html#tipi-numerici","title":"Tipi numerici","text":"<p>Nel riquadro sotto un esempio di assegnazione di variabili di tipo numerico.</p> <pre><code>a = 5  # numero intero\nb = 3.14  # numero decimale in floating point\nc = 2 + 3j  # numero complesso\n\nd = 0xABCDEF  # numero intero in esadecimale\ne = 0.6532  # lo 0 non \u00e8 indispensabile nei floating point\nf = 1e6  # numero floating point in notazione esponenziale\ng = 10_000_000  # gli _ sono ignorati ma aumentano la leggibilit\u00e0\n</code></pre> <p>I tipi numerici possono essere manipolati con gli operatori aritmetici che eseguono le operazioni aritmetiche fondamentali.</p> <pre><code>c = a + b  # Addizione\nc = a - b  # Sottrazione\nc = a * b  # Moltiplicazione\nc = a / b  # Divisione\nc = a**b  # Potenza\nc = a % b  # Modulo (resto della divisione)\nc = a // b  # Divisione intera\n</code></pre>"},{"location":"material/fundamentals.html#tipo-bool","title":"Tipo bool","text":"<p>Il tipo bool \u00e8 di fondamentale importanza per manipolare l'ordine in cui le istruzioni di un programma vengono eseguite, il cosiddetto flusso di controllo (control flow). Le variabili di tipo bool possono essere manipolate tramite operatori logici, che eseguono le operazioni fondamentali della logica simbolica, ed operatori di confronto, che vengono utilizzati per confrontare valori e determinare relazioni tra di essi.</p> operazione sintassi congiunzione <code>and</code> negazione <code>not</code> disgiunzione inclusiva <code>or</code> uguaglianza <code>is</code> equivalenza <code>==</code> non equivalenza <code>!=</code> <p>Nel codice sottostante alcuni esempi di utilizzo di operatori su variabili booleane.</p> <pre><code># Operatori logici\nprint(True and False)  # False\nprint(not True)  # False\nprint(True or False)  # True\n\n# Operatori di confronto\na = 5\nb = 5\nc = 10 / 2\nprint(a is b)  # True\nprint(a is c)  # False\nprint(a == b)  # True\nprint(a == c)  # True\nprint(a != b)  # False\n</code></pre> <p>Altre caratteristiche del tipo bool sono le seguenti:</p> <ul> <li><code>False</code> e <code>True</code> sono alias rispettivamente per <code>0</code> ed <code>1</code>;</li> <li>un'espressione numerica \u00e8 falsa se \u00e8 uguale a <code>0</code>, altrimenti \u00e8 vera;</li> <li>sequenze e dizionari vengono valutate a <code>True</code> (ma non sono uguali n\u00e9 equivalenti ad esso) se contengono almeno un elemento.</li> </ul>"},{"location":"material/fundamentals.html#stringhe","title":"Stringhe","text":"<p>Le stringhe in Python sono semplicemente collezioni ordinate di caratteri, che possono essere delimitate da <code>'</code> o da <code>\"</code>. Sebbene la scelta sia indifferente, il fatto che il carattere <code>'</code> potrebbe servire all'interno della stringa, dato che rappresenta anche l'apostrofo, rende pi\u00f9 conveniente usare <code>\"</code>.</p> <pre><code>stringa_apici_singoli = \"Questo \u00e8 un esempio di stringa con gli apici singoli.\"\n\nstringa_apici_doppi = \"Questo \u00e8 un esempio di stringa con gli apici doppi.\"\n</code></pre> <p>Racchiudendo una stringa con tripli apici, siano essi singoli o doppi, \u00e8 possibile farla spaziare su pi\u00f9 righe:</p> <pre><code>stringa_tripli_apici_singoli = \"\"\"Questo \u00e8 un esempio\ndi stringa con tripli apici singoli su\npi\u00f9 righe.\"\"\"\n\nstringa_tripli_apici_doppi = \"\"\"Questo \u00e8 un esempio\ndi stringa con tripli apici doppi su\npi\u00f9 righe.\"\"\"\n</code></pre> <p>La formattazione delle stringhe in Python \u00e8 un concetto fondamentale per manipolare e presentare dati in modo leggibile e strutturato. Per introdurla abbiamo bisogno di anticipare il concetto di metodo. Tutti gli elementi introdotti finora, e tutti quelli che introdurremo in seguito, sono oggetti. Gli oggetti hanno funzionalit\u00e0, chiamate metodi, associate a loro.</p> <p>Un metodo \u00e8 semplicemente una funzione che \u00e8 \"attaccata\" a un oggetto e pu\u00f2 agire sui dati dell'oggetto. Nel caso delle stringhe, il metodo <code>format()</code> \u00e8 uno di questi. Esso permette di inserire valori all'interno della stringa. Approfondiremo il concetto di metodi quando parleremo delle classi.</p> <pre><code>nome = \"Luca\"\neta = 32\n\n# Utilizzo del metodo format() per inserire valori in una stringa\nsaluto = \"Ciao, mi chiamo {} e ho {} anni.\".format(nome, eta)\n</code></pre> <p>Nell'esempio sopra, <code>{}</code> \u00e8 un segnaposto all'interno della stringa. Quando chiamiamo il metodo <code>format()</code> sulla stringa <code>saluto</code> e passiamo le variabili <code>nome</code> e <code>eta</code>, i valori vengono inseriti nei rispettivi segnaposto. Il risultato sar\u00e0:</p> <pre><code>Ciao, mi chiamo Luca e ho 32 anni.\n</code></pre> <p>Il metodo <code>format()</code> offre molta flessibilit\u00e0. \u00c8 possibile specificare l'ordine dei valori, utilizzare segnaposto numerati o nominati e applicare formattazioni pi\u00f9 complesse per numeri, stringhe e altri tipi di dati. Ad esempio:</p> <pre><code># Utilizzo di segnaposti nominati\nsaluto = \"Ciao, mi chiamo {nome} e ho {eta} anni.\".format(nome=\"Luca\", eta=32)\n</code></pre> <p>Esiste per\u00f2 una tecnica molto pi\u00f9 conveniente per la formattazione delle stringhe, vale a dire l'utilizzo delle cosiddette f-string:</p> <pre><code>nome = \"Luca\"\neta = 32\nsaluto = f\"Ciao, mi chiamo {nome} e ho {eta} anni.\"\n</code></pre> <p>Un'altra operazione frequente sulle stringhe \u00e8 la concatenazione, ottenuta con l'operatore <code>+</code>:</p> <pre><code>frase_iniziale = \"Il cielo \u00e8 \"\ncolore = \"blu\"\npunteggiatura = \".\"\n\nfrase_completa = frase_iniziale + colore + punteggiatura\n\nprint(frase_completa)  # Il cielo \u00e8 blu.\n</code></pre> <p>Concatenazione silente</p> <p>In effetti, \u00e8 sufficiente mettere due stringhe vicine per ottenere una concatenazione, propriet\u00e0 detta concatenazione silente. Fare estremamente attenzione a questa particolare funzionalit\u00e0 di Python, dato che \u00e8 una fonte inesauribile di bug.</p> <p>Possiamo ottenere la lunghezza di una stringa con la funzione <code>len()</code>. Introdurremo il concetto di funzioni nel capitolo apposito, per ora \u00e8 sufficiente sapere che le funzioni in Python sono molto simili al concetto matematico di funzione:  hanno in input un certo numero di variabili e restituiscono uno o pi\u00f9 valori.</p> <pre><code>len(\"ciao\")  # 4\n</code></pre>"},{"location":"material/fundamentals.html#esercizi","title":"Esercizi","text":""},{"location":"material/fundamentals.html#esercizio-1","title":"Esercizio 1","text":"<p>Utilizza le f-string per formattare la stringa seguente, inserendo le variabili <code>nome_utente</code> e <code>data_odierna</code> nei posti appropriati.</p> Soluzione <pre><code>nome_utente = \"Luca\"\ndata_odierna = \"21/03/2024\"\nrisultato = f\"Ciao sono {nome_utente}, oggi \u00e8 il {data_odierna}.\"\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-2","title":"Esercizio 2","text":"<p>Crea due variabili <code>numero1</code> e <code>numero2</code>, assegnale rispettivamente i valori 15 e 4. Calcola la loro somma, differenza, prodotto, quoziente, resto della divisione e il risultato della divisione intera.</p> Soluzione <pre><code>numero1 = 15\nnumero2 = 4\nsomma = numero1 + numero2\ndifferenza = numero1 - numero2\nprodotto = numero1 * numero2\nquoziente = numero1 / numero2\nresto = numero1 % numero2\ndivisione_intera = numero1 // numero2\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-3","title":"Esercizio 3","text":"<p>Crea due variabili <code>parte1</code> e <code>parte2</code>, assegna a <code>parte1</code> il valore \"Buongiorno\" e a <code>parte2</code> il valore \"mondo!\". Concatena queste due stringhe per formare la frase \"Buongiorno mondo!\".</p> Soluzione <pre><code>parte1 = \"Buongiorno\"\nparte2 = \" mondo!\"\nfrase = parte1 + parte2\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-4","title":"Esercizio 4","text":"<p>Crea una variabile <code>numero</code> con valore 100. Convertila in una stringa e concatenala con la stringa \" metri quadrati\" per formare la frase \"100 metri quadrati\".</p> Soluzione <pre><code>numero = 100\nfrase = str(numero) + \" metri quadrati\"\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-5","title":"Esercizio 5","text":"<p>Nel riquadro rosso trovi dei nomi di variabili che sono sconsigliabili, sei in grado di dire quale \u00e8 il problema di ciascun nome?</p> <p>Nomi di variabili</p> <p><code>cf</code>, <code>nomeUtente</code>, <code>data</code>, <code>DATA_NASCITA</code></p> Soluzione <ul> <li><code>cf</code>\u00e8 troppo corta.</li> <li><code>nomeUtente</code> non \u00e8 in snake case.</li> <li><code>data</code> \u00e8 troppo generica.</li> <li><code>DATA_NASCITA</code> \u00e8 tutta in maiuscolo e quindi rischia di essere confusa con una costante.</li> </ul>"},{"location":"material/fundamentals.html#esercizio-6","title":"Esercizio 6","text":"<p>Utilizza gli operatori di confronto per confrontare due variabili <code>a</code> e <code>b</code>, assegnando a <code>a</code> il valore 10 e a <code>b</code> il valore 5. Controlla se <code>a</code> \u00e8 maggiore di <code>b</code>, se <code>a</code> \u00e8 uguale a <code>b</code>, e se <code>a</code> \u00e8 diverso da <code>b</code>.</p> Soluzione <pre><code>a = 10\nb = 5\nmaggiore = a &gt; b  # True\nuguale = a == b  # False\ndiverso = a != b  # True\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-7","title":"Esercizio 7","text":"<p>Crea una variabile <code>numero</code> con valore 0. Usa un operatore di confronto per verificare se <code>numero</code> \u00e8 uguale a <code>False</code>.</p> Soluzione <pre><code>numero = 0\nconfronto = numero == False  # True\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-8","title":"Esercizio 8","text":"<p>Dichiara una variabile stringa <code>testo</code> con valore \"ciao\". Utilizza gli operatori di confronto per verificare se la lunghezza della stringa <code>testo</code> \u00e8 maggiore di 5.</p> Soluzione <pre><code>testo = \"ciao\"\nconfronto = len(testo) &gt; 5  # False\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-9","title":"Esercizio 9","text":"<p>Crea due stringhe, <code>stringa1</code> con valore \"Ciao\" e <code>stringa2</code> con valore \"Mondo\". Utilizza l'operatore di concatenazione per unire le due stringhe in una terza stringa <code>stringa_unione</code> e verifica se la lunghezza totale della stringa risultante \u00e8 uguale a 9.</p> Soluzione <pre><code>stringa1 = \"Ciao\"\nstringa2 = \"Mondo\"\nstringa_unione = stringa1 + stringa2\nlunghezza = len(stringa_unione) == 9  # True\n</code></pre>"},{"location":"material/fundamentals.html#esercizio-10","title":"Esercizio 10","text":"<p>Dichiara una variabile <code>valore</code> con un numero intero a tua scelta. Usa un operatore logico per verificare se <code>valore</code> \u00e8 positivo e minore di 10.</p> Soluzione <pre><code>valore = 7\ncondizione = valore &gt; 0 and valore &lt; 10  # True\n</code></pre>"},{"location":"material/introduction.html","title":"Introduzione","text":""},{"location":"material/introduction.html#perche-python","title":"Perch\u00e9 Python?","text":"<p>Python \u00e8 un linguaggio di programmazione potente e flessibile, famoso per la sua leggibilit\u00e0 e semplicit\u00e0. \u00c8 utilizzato sia da principianti che da esperti in svariati campi, dalla scienza dei dati all'intelligenza artificiale, passando per lo sviluppo web e molto altro. La sua versatilit\u00e0 ed immediatezza rendono Python il linguaggio ideale per iniziare.</p>"},{"location":"material/introduction.html#cosa-devo-sapere-prima-di-iniziare","title":"Cosa devo sapere prima di iniziare?","text":"<p>Niente. Questo corso \u00e8 stato pensato e strutturato appositamente per chi non ha alcuna esperienza precedente con la programmazione. Se vi sentite completamente a digiuno di nozioni in questo ambito, siete nel posto giusto.</p>"},{"location":"material/introduction.html#come-si-leggono-i-riquadri","title":"Come si leggono i riquadri?","text":"<p>Attenzione</p> <p>Riquadri come questo contengono informazioni a cui si deve prestare particolare attenzione perch\u00e9 possono causare bug o comportamenti indesiderati nel codice.</p> <p>Consiglio da esperti</p> <p>Riquadri come questo contengono informazioni un po' pi\u00f9 avanzate, non fondamentali alla comprensione del testo ma preziose da conoscere.</p> <p>Esempio positivo</p> <p>Riquadri come questo contengono esempi positivi da imitare.</p> <p>Esempio negativo</p> <p>Riquadri come questo contengono esempi di codice scritto male o addirittura non funzionante.</p> <p>Citazione</p> <p>Riquadri come questo contengono citazioni.</p> Soluzione di un esercizio <p>Riquadri come questo contengono le soluzioni degli esercizi, clicca per rivelarle.</p>"},{"location":"notebooks/exercises/bank.html","title":"Esercizio","text":"Mario Alessia Anita Csaba Ron Tipo Conto Corrente Base Premium Base Base Base Servizio Scoperto Yes Yes No Yes Yes Saldo al 01/01/23 1020.01 120.91 -32.12 1020.01 0 In\u00a0[1]: Copied! <pre>Welcome to STEM Bank\n</pre> <ol> <li>Assegnare la commissione mensile del conto corrente alla variabile <code>premium_account_fee_monthly</code>.</li> </ol> In\u00a0[2]: Copied! <pre>\n</pre> <ol> <li>Verificare attraverso gli operatori di confronto che la commissione annuale sia pari a 48 \u20ac. Stampare un messaggio esplicativo.</li> </ol> In\u00a0[3]: Copied! <pre>\n</pre> <pre>I conti tornano!\n</pre> In\u00a0[4]: Copied! <pre>\n</pre> <ol> <li>Definire un dizionario <code>customer_has_overdraft</code> le cui chiavi sono i clienti e i valori (Bool) contenengono <code>True</code> se il prodotto <code>Overdraft</code> \u00e8 attivo e <code>False</code> se non \u00e8 attivo, sfruttando il fatto che le chiavi di questo dizionario devono essere le stesse di quelle del dizionario precedente.</li> </ol> In\u00a0[5]: Copied! <pre>\n</pre> <ol> <li>Definire un dizionario <code>customer_balance_last_year</code> le cui chiavi sono i clienti e i valori contenengono il saldo iniziale del conto del cliente.</li> </ol> In\u00a0[6]: Copied! <pre>\n</pre> <ol> <li>Per ogni cliente generare una lista di 12 numeri float tra -300.00 e 300.00 dove l'elemento di posto i rappresenta il saldo delle transazioni effettuate nell'i+1-esimo mese dell'anno. Mettiamo le liste in un dizionario e poi stampiamolo. Per eseguire questo esercizio avremo bisogno della funzione <code>randint</code> dal modulo <code>random</code>. Andiamo a leggerne la documentazione qui per capire come funziona.</li> </ol> In\u00a0[7]: Copied! <pre>\n</pre> <pre>Transazioni di Mario: [-237.45, -66.41, -282.35, 194.77, -14.08, 250.91, -202.43, -262.9, -80.48, 182.86, 275.87, -57.18]\nTransazioni di Alessia: [257.81, -142.57, -3.78, 276.02, 79.35, 138.24, -16.44, 298.12, 135.71, 220.88, 251.2, 175.89]\nTransazioni di Anita: [-227.49, -52.68, -242.17, -38.51, -201.04, 201.84, -191.04, -274.5, -262.54, 150.89, -101.28, 52.54]\nTransazioni di Csaba: [204.89, 131.46, 178.78, 38.15, 69.14, 104.76, -63.06, 132.79, -286.14, -222.96, -157.68, -149.3]\nTransazioni di Ron: [17.97, -113.2, 166.35, -274.29, 235.21, -170.29, -113.93, 224.74, -95.08, 168.85, -10.89, 71.13]\n\n\n\n\n\n\n{'Mario': [-237.45, -66.41, -282.35, 194.77, -14.08, 250.91, -202.43, -262.9, -80.48, 182.86, 275.87, -57.18], 'Alessia': [257.81, -142.57, -3.78, 276.02, 79.35, 138.24, -16.44, 298.12, 135.71, 220.88, 251.2, 175.89], 'Anita': [-227.49, -52.68, -242.17, -38.51, -201.04, 201.84, -191.04, -274.5, -262.54, 150.89, -101.28, 52.54], 'Csaba': [204.89, 131.46, 178.78, 38.15, 69.14, 104.76, -63.06, 132.79, -286.14, -222.96, -157.68, -149.3], 'Ron': [17.97, -113.2, 166.35, -274.29, 235.21, -170.29, -113.93, 224.74, -95.08, 168.85, -10.89, 71.13]}\n</pre> In\u00a0[8]: Copied! <pre>\n</pre> <pre>{'Alessia': [140.17,\n             95.33,\n             71.66,\n             149.41,\n             -58.09,\n             176.6,\n             -254.79,\n             -50.98,\n             -124.72,\n             194.94,\n             -160.38,\n             100.5],\n 'Anita': [274.05,\n           246.87,\n           22.25,\n           -131.76,\n           -250.29,\n           -246.01,\n           232.37,\n           -46.78,\n           -295.25,\n           -22.81,\n           -147.84,\n           -183.93],\n 'Csaba': [-299.57,\n           285.04,\n           38.79,\n           -244.38,\n           210.75,\n           -52.08,\n           128.45,\n           -222.99,\n           119.16,\n           -14.01,\n           -207.88,\n           -207.06],\n 'Mario': [-165.98,\n           54.8,\n           104.45,\n           147.51,\n           88.95,\n           -128.8,\n           86.87,\n           -110.32,\n           -171.21,\n           209.32,\n           -297.11,\n           63.52],\n 'Ron': [-298.88,\n         -194.76,\n         -299.05,\n         -79.17,\n         155.78,\n         285.17,\n         124.93,\n         250.45,\n         -88.19,\n         -247.46,\n         98.48,\n         270.1]}\n</pre> In\u00a0[9]: Copied! <pre>\n</pre> <pre>{'Alessia': [-126.25,\n             22.81,\n             192.77,\n             -158.54,\n             -161.51,\n             -176.52,\n             196.73,\n             -161.14,\n             -257.53,\n             -254.34,\n             6.0,\n             -50.42],\n 'Anita': [178.9,\n           -212.67,\n           -239.31,\n           -262.85,\n           114.79,\n           -46.9,\n           -297.97,\n           90.69,\n           59.16,\n           89.09,\n           180.76,\n           -247.64],\n 'Csaba': [-186.8,\n           165.29,\n           231.99,\n           -293.6,\n           86.1,\n           -213.81,\n           155.74,\n           -163.77,\n           72.38,\n           70.89,\n           112.15,\n           -159.3],\n 'Mario': [239.84,\n           255.34,\n           281.35,\n           200.74,\n           61.53,\n           168.86,\n           151.4,\n           -61.25,\n           -21.38,\n           -292.1,\n           -165.78,\n           2.97],\n 'Ron': [4.63,\n         36.83,\n         -101.57,\n         -166.89,\n         -112.41,\n         -212.34,\n         124.26,\n         -268.16,\n         48.96,\n         231.26,\n         -99.4,\n         -217.81]}\n</pre> <p>Siccome vogliamo che i passi seguenti siano identici per tutti, useremo delle liste predefinite. Copia il codice seguente e incollalo in una nuova cella.</p> <pre>customer_transaction_balances = {\n    \"Mario\": [-289.16, 57.17, -92.70, 56.69, -24.68, 75.02, 197.91, 191.07, -103.75, -96.43, -133.06, 118.55],\n    \"Alessia\": [-252.23, -114.19, 94.51, -178.26, -280.96, 158.67, -257.44, 284.49, -196.76, -241.04, 298.32, 192.75],\n    \"Anita\": [-20.76, 52.88, 0.00, -210.23, 210.23, 0.00, 0.00, 0.00, 0.00, 114.48, -110.57, 195.32],\n    \"Csaba\": [-114.24, -47.49, -91.33, 259.19, -56.47, -175.55, 246.66, 201.63, -165.04, 244.74, 132.45, 106.47],\n    \"Ron\": [-10.86, -73.45, 30.32, 52.99, 247.69, -85.21, -187.80, 99.48, -171.33, -16.24, 183.08, 234.57]\n}\n</pre> In\u00a0[10]: Copied! <pre>\n</pre> In\u00a0[11]: Copied! <pre>\n</pre> <pre>Mario ha effettuato transazioni a Gennaio\n</pre> <ol> <li>Verificare se la somma delle transazioni di Alessia siano negative</li> </ol> In\u00a0[12]: Copied! <pre>\n</pre> <pre>La somma delle transazioni di Alessia \u00e8 negativa\nLa somma delle transazioni di Alessia \u00e8 negativa\nLa somma delle transazioni di Alessia \u00e8 negativa\nLa somma delle transazioni di Alessia \u00e8 negativa\n</pre> <ol> <li>Stampare tutte le transazioni di Mario usando la dicitura \"Transazioni Mario : \u20ac\" (e.g. per il mese di Aprile \"Transazioni Mario Aprile:3 \u20ac\"). hint</li> </ol> In\u00a0[13]: Copied! <pre>\n</pre> <pre>Transazioni Mario Gennaio: -289.16 \u20ac\nTransazioni Mario Febbraio: 57.17 \u20ac\nTransazioni Mario Marzo: -92.7 \u20ac\nTransazioni Mario Aprile: 56.69 \u20ac\nTransazioni Mario Maggio: -24.68 \u20ac\nTransazioni Mario Giugno: 75.02 \u20ac\nTransazioni Mario Luglio: 197.91 \u20ac\nTransazioni Mario Agosto: 191.07 \u20ac\nTransazioni Mario Settembre: -103.75 \u20ac\nTransazioni Mario Ottobre: -96.43 \u20ac\nTransazioni Mario Novembre: -133.06 \u20ac\nTransazioni Mario Dicembre: 118.55 \u20ac\n</pre> In\u00a0[14]: Copied! <pre>\n</pre> <pre>Transazioni Mario Gennaio: -289.16 \u20ac\nTransazioni Mario Febbraio: 57.17 \u20ac\nTransazioni Mario Marzo: -92.7 \u20ac\nTransazioni Mario Aprile: 56.69 \u20ac\nTransazioni Mario Maggio: -24.68 \u20ac\nTransazioni Mario Giugno: 75.02 \u20ac\nTransazioni Mario Luglio: 197.91 \u20ac\nTransazioni Mario Agosto: 191.07 \u20ac\nTransazioni Mario Settembre: -103.75 \u20ac\nTransazioni Mario Ottobre: -96.43 \u20ac\nTransazioni Mario Novembre: -133.06 \u20ac\nTransazioni Mario Dicembre: 118.55 \u20ac\n</pre> In\u00a0[15]: Copied! <pre>\n</pre> <pre>Transazioni Mario Gennaio: -289.16 \u20ac\nTransazioni Mario Febbraio: 57.17 \u20ac\nTransazioni Mario Marzo: -92.7 \u20ac\nTransazioni Mario Aprile: 56.69 \u20ac\nTransazioni Mario Maggio: -24.68 \u20ac\nTransazioni Mario Giugno: 75.02 \u20ac\nTransazioni Mario Luglio: 197.91 \u20ac\nTransazioni Mario Agosto: 191.07 \u20ac\nTransazioni Mario Settembre: -103.75 \u20ac\nTransazioni Mario Ottobre: -96.43 \u20ac\nTransazioni Mario Novembre: -133.06 \u20ac\nTransazioni Mario Dicembre: 118.55 \u20ac\n</pre> <ol> <li>Ripetere quanto fatto con Mario anche con Alessia, ma stavolta stampando \"Mese con saldo negativo\" se l'importo \u00e8 negativo.</li> </ol> In\u00a0[16]: Copied! <pre>\n</pre> <pre>Mese negativo\nMese negativo\nMese negativo\nMese negativo\nMese negativo\nTransazioni Alessia Giugno: 158.67 \u20ac\nMese negativo\nMese negativo\nMese negativo\nMese negativo\nTransazioni Alessia Novembre: 298.32 \u20ac\nTransazioni Alessia Dicembre: 192.75 \u20ac\n</pre> In\u00a0[17]: Copied! <pre>\n</pre> <ol> <li>Definire una funzione <code>get_transaction_sum</code> che riceva in input la lista delle transazioni e fornisca in output la somma delle transazioni. Verificare il risultato della funzione usando la lista delle transazioni di Alessia e confrontandolo con l'esercizio della sezione control flow.</li> </ol> In\u00a0[18]: Copied! <pre>\n</pre> <ol> <li>Definire una funzione <code>get_overdraft_monthly_fees</code> che, dato un importo di scoperto, restituisca la commissione da pagare per quel dato mese.</li> </ol> In\u00a0[19]: Copied! <pre>\n</pre> In\u00a0[20]: Copied! <pre>\n</pre> <ol> <li>Ridefiniamo la classe aggiungendo un metodo `get_fees`` che restituisca il costo del conto del cliente. Stampiamo il messaggio \"Commissioni mensili Mario (conto: ): \".</li> </ol> In\u00a0[21]: Copied! <pre>\n</pre> Out[21]: <pre>0.0</pre> <ol> <li>Aggiungiamo un metodo <code>upgrade</code>che modifica il tipo di conto facendolo passare a Premium. Cambiamo il tipo di conto di Mario e invochiamo nuovamente il metodo <code>get_fees</code>.</li> </ol> In\u00a0[22]: Copied! <pre>\n</pre> <pre>Commissioni mensili Mario (conto: Base): 0\nCommissioni mensili Mario (conto: Premium): 4.0\n</pre> In\u00a0[23]: Copied! <pre>\n</pre> <pre>{'Alessia': -1229.2299999999998,\n 'Anita': 263.46999999999997,\n 'Csaba': 1561.03,\n 'Mario': 976.64,\n 'Ron': 303.24}\n</pre> <ol> <li>Mostrare a video i nomi dei clienti che hanno utilizzato il servizio di scoperto e i mesi in cui lo hanno fatto.</li> </ol> In\u00a0[24]: Copied! <pre>\n</pre> <pre>Analisi del cliente Mario\nAnalisi del mese Gennaio per il cliente Mario.\nAnalisi del mese Febbraio per il cliente Mario.\nAnalisi del mese Marzo per il cliente Mario.\nAnalisi del mese Aprile per il cliente Mario.\nAnalisi del mese Maggio per il cliente Mario.\nAnalisi del mese Giugno per il cliente Mario.\nAnalisi del mese Luglio per il cliente Mario.\nAnalisi del mese Agosto per il cliente Mario.\nAnalisi del mese Settembre per il cliente Mario.\nAnalisi del mese Ottobre per il cliente Mario.\nAnalisi del mese Novembre per il cliente Mario.\nAnalisi del mese Dicembre per il cliente Mario.\nAnalisi del cliente Alessia\nAnalisi del mese Gennaio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -131.32 nel mese di Gennaio.\nAnalisi del mese Febbraio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -245.51 nel mese di Febbraio.\nAnalisi del mese Marzo per il cliente Alessia.\nIl cliente Alessia ha un saldo di -440.02 nel mese di Marzo.\nAnalisi del mese Aprile per il cliente Alessia.\nIl cliente Alessia ha un saldo di -618.28 nel mese di Aprile.\nAnalisi del mese Maggio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -899.24 nel mese di Maggio.\nAnalisi del mese Giugno per il cliente Alessia.\nIl cliente Alessia ha un saldo di -740.57 nel mese di Giugno.\nAnalisi del mese Luglio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -998.01 nel mese di Luglio.\nAnalisi del mese Agosto per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1282.5 nel mese di Agosto.\nAnalisi del mese Settembre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1479.26 nel mese di Settembre.\nAnalisi del mese Ottobre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1720.3 nel mese di Ottobre.\nAnalisi del mese Novembre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1421.98 nel mese di Novembre.\nAnalisi del mese Dicembre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1229.23 nel mese di Dicembre.\nAnalisi del cliente Anita\nIl cliente Anita non ha attivo il servizio di scoperto.\nAnalisi del cliente Csaba\nAnalisi del mese Gennaio per il cliente Csaba.\nAnalisi del mese Febbraio per il cliente Csaba.\nAnalisi del mese Marzo per il cliente Csaba.\nAnalisi del mese Aprile per il cliente Csaba.\nAnalisi del mese Maggio per il cliente Csaba.\nAnalisi del mese Giugno per il cliente Csaba.\nAnalisi del mese Luglio per il cliente Csaba.\nAnalisi del mese Agosto per il cliente Csaba.\nAnalisi del mese Settembre per il cliente Csaba.\nAnalisi del mese Ottobre per il cliente Csaba.\nAnalisi del mese Novembre per il cliente Csaba.\nAnalisi del mese Dicembre per il cliente Csaba.\nAnalisi del cliente Ron\nAnalisi del mese Gennaio per il cliente Ron.\nIl cliente Ron ha un saldo di -10.86 nel mese di Gennaio.\nAnalisi del mese Febbraio per il cliente Ron.\nIl cliente Ron ha un saldo di -84.31 nel mese di Febbraio.\nAnalisi del mese Marzo per il cliente Ron.\nIl cliente Ron ha un saldo di -53.99 nel mese di Marzo.\nAnalisi del mese Aprile per il cliente Ron.\nIl cliente Ron ha un saldo di -1.0 nel mese di Aprile.\nAnalisi del mese Maggio per il cliente Ron.\nAnalisi del mese Giugno per il cliente Ron.\nAnalisi del mese Luglio per il cliente Ron.\nIl cliente Ron ha un saldo di -26.319999999999993 nel mese di Luglio.\nAnalisi del mese Agosto per il cliente Ron.\nAnalisi del mese Settembre per il cliente Ron.\nIl cliente Ron ha un saldo di -98.17 nel mese di Settembre.\nAnalisi del mese Ottobre per il cliente Ron.\nIl cliente Ron ha un saldo di -114.41 nel mese di Ottobre.\nAnalisi del mese Novembre per il cliente Ron.\nAnalisi del mese Dicembre per il cliente Ron.\n{'Alessia': ['Gennaio',\n             'Febbraio',\n             'Marzo',\n             'Aprile',\n             'Maggio',\n             'Giugno',\n             'Luglio',\n             'Agosto',\n             'Settembre',\n             'Ottobre',\n             'Novembre',\n             'Dicembre'],\n 'Anita': [],\n 'Csaba': [],\n 'Mario': [],\n 'Ron': ['Gennaio',\n         'Febbraio',\n         'Marzo',\n         'Aprile',\n         'Luglio',\n         'Settembre',\n         'Ottobre']}\n{'Alessia': ['Gennaio',\n             'Febbraio',\n             'Marzo',\n             'Aprile',\n             'Maggio',\n             'Giugno',\n             'Luglio',\n             'Agosto',\n             'Settembre',\n             'Ottobre',\n             'Novembre',\n             'Dicembre'],\n 'Anita': [],\n 'Csaba': [],\n 'Mario': [],\n 'Ron': ['Gennaio',\n         'Febbraio',\n         'Marzo',\n         'Aprile',\n         'Luglio',\n         'Settembre',\n         'Ottobre']}\n</pre> <ol> <li>Calcolare i ricavi totali per cliente <code>tot_rev_on_customer</code> come la somma di tutte le commissioni applicate per il conto e per gli scoperti.</li> </ol> In\u00a0[25]: Copied! <pre>\n</pre> <pre>{'Alessia': 14.5, 'Anita': None, 'Csaba': 0, 'Mario': 0, 'Ron': 7}\n</pre> <ol> <li>Calcolare i ricavi complessivi della banca <code>tot_rev_bank</code>.</li> </ol> In\u00a0[26]: Copied! <pre>\n</pre> <pre>Ricavi totali: 21.5\n</pre>"},{"location":"notebooks/exercises/bank.html#esercizio","title":"Esercizio\u00b6","text":""},{"location":"notebooks/exercises/bank.html#assunzioni","title":"Assunzioni\u00b6","text":"<p>La \"STEM Bank\" ha 5 clienti:</p> <ul> <li>Mario.</li> <li>Alessia.</li> <li>Anita.</li> <li>Csaba.</li> <li>Ron.</li> </ul> <p>La banca offre due tipi di conti correnti:</p> <ul> <li>Base: gratuito.</li> <li>Premium: costo 4 \u20ac al mese.</li> </ul> <p>La banca offre anche l'attivazione di servizio di scoperto. La copertura massima dello scoperto \u00e8:</p> <ul> <li>3000 \u20ac per i conti Base.</li> <li>12000 \u20ac per i conti Premium.</li> </ul> <p>Il costo dello scoperto \u00e8 pari a:</p> <ul> <li>1 \u20ac fino a 1500 \u20ac.</li> <li>3.5 \u20ac fino a 3000 \u20ac.</li> <li>6 \u20ac fino a 5000 \u20ac.</li> <li>6 \u20ac + 0.05% della somma eccedente i 5000 \u20ac per gli importi sopra i 5000 \u20ac.</li> </ul> <p>Di seguito \u00e8 presente una tabella in cui sono mostrate sinteticamente le info descritte in precedenza.</p>"},{"location":"notebooks/exercises/bank.html#commenti-variabili-e-costanti","title":"Commenti, Variabili e Costanti\u00b6","text":"<ol> <li>Assegnare il nome della banca che offre il conto alla variabile <code>bank_name</code>. Stampare un messaggio di benvenuto usando le f-string.</li> </ol>"},{"location":"notebooks/exercises/bank.html#collezioni","title":"Collezioni\u00b6","text":"<ol> <li>Definire un dizionario <code>customer_account_type</code> le cui chiavi sono i clienti e i valori contenengono la tipologia di conto corrente.</li> </ol>"},{"location":"notebooks/exercises/bank.html#control-flow","title":"Control Flow\u00b6","text":"<ol> <li>Verificare se nel mese di Gennaio Mario ha effettuato delle transazioni. nel caso in cui l'esito sia positivo stampare il seguente messaggio \"Mario ha effettuato transazioni a Gennaio\" altrimento stampare il seguente messaggio \"Mario non ha effettuato transazioni a Gennaio\"</li> </ol>"},{"location":"notebooks/exercises/bank.html#funzioni","title":"Funzioni\u00b6","text":"<ol> <li>Definire una funzione <code>get_transaction_sign</code> che restituisca il valore <code>True</code> se la transazione ha segno negativo e <code>False</code> se ha segno positivo.</li> </ol>"},{"location":"notebooks/exercises/bank.html#classi","title":"Classi\u00b6","text":"<ol> <li><p>Finora abbiamo considerato le varie caratteristiche del cliente in maniera separata. Ora creiamo una classe <code>Customer</code> che contenga tutte le informazioni pertinenti ad un dato cliente. La classe dovr\u00e0 avere quindi gli attributi: <code>account_type</code> (\"Base\" o \"Premium\"), <code>has_overdraft_service</code>(<code>True</code> o <code>False</code>) ed il bilancio (un numero float) ed ovviamente un attributo <code>name</code> contente il nome del cliente. Dovremo poter inizializzare la classe per Mario cos\u00ec:</p> <pre>mario = Customer(\"Mario\", \"Base\", True, 1020.01)\n</pre> </li> </ol>"},{"location":"notebooks/exercises/bank.html#esercizio-finale","title":"Esercizio Finale\u00b6","text":"<p>Completiamo il puzzle</p> <ol> <li>Calcolare il saldo al 31/12/23 per ciascun cliente <code>outstanding_eoy_customer</code>.</li> </ol>"},{"location":"notebooks/solutions/bank.html","title":"Esercizio","text":"Mario Alessia Anita Csaba Ron Tipo Conto Corrente Base Premium Base Base Base Servizio Scoperto Yes Yes No Yes Yes Saldo al 01/01/23 1020.01 120.91 -32.12 1020.01 0 In\u00a0[1]: Copied! <pre>bank_name = \"STEM Bank\"\nprint(f\"Welcome to {bank_name}\")\n</pre> bank_name = \"STEM Bank\" print(f\"Welcome to {bank_name}\") <pre>Welcome to STEM Bank\n</pre> <ol> <li>Assegnare la commissione mensile del conto corrente alla variabile <code>premium_account_fee_monthly</code>.</li> </ol> In\u00a0[2]: Copied! <pre>premium_account_fee_monthly = 4\n</pre> premium_account_fee_monthly = 4 <ol> <li>Verificare attraverso gli operatori di confronto che la commissione annuale sia pari a 48 \u20ac. Stampare un messaggio esplicativo.</li> </ol> In\u00a0[3]: Copied! <pre>N_MONTHS = 12\n\nif (premium_account_fee_monthly * N_MONTHS) == 48:\n    print(\"I conti tornano!\")\nelse:\n    print(\"Qualcosa non quadra.\")\n</pre> N_MONTHS = 12  if (premium_account_fee_monthly * N_MONTHS) == 48:     print(\"I conti tornano!\") else:     print(\"Qualcosa non quadra.\") <pre>I conti tornano!\n</pre> In\u00a0[4]: Copied! <pre># Livello 1\ncustomer_account_type = {}\ncustomer_account_type[\"Mario\"] = \"Base\"\ncustomer_account_type[\"Alessia\"] = \"Premium\"\ncustomer_account_type[\"Anita\"] = \"Base\"\ncustomer_account_type[\"Csaba\"] = \"Base\"\ncustomer_account_type[\"Ron\"] = \"Base\"\n\n# Livello 2\ncustomer_account_type = {\n    \"Mario\": \"Base\",\n    \"Alessia\": \"Premium\",\n    \"Anita\": \"Base\",\n    \"Csaba\": \"Base\",\n    \"Ron\": \"Base\",\n}\n\n# Livello 3\n## Notiamo come solo Alessia abbia un account premium, quindi usiamo una comprehension per definire il dizionario\ncustomer_account_type = {\n    name: \"Premium\" if (name == \"Alessia\") else \"Base\"\n    for name in (\n        \"Mario\",\n        \"Alessia\",\n        \"Anita\",\n        \"Csaba\",\n        \"Ron\",\n    )\n}\n</pre> # Livello 1 customer_account_type = {} customer_account_type[\"Mario\"] = \"Base\" customer_account_type[\"Alessia\"] = \"Premium\" customer_account_type[\"Anita\"] = \"Base\" customer_account_type[\"Csaba\"] = \"Base\" customer_account_type[\"Ron\"] = \"Base\"  # Livello 2 customer_account_type = {     \"Mario\": \"Base\",     \"Alessia\": \"Premium\",     \"Anita\": \"Base\",     \"Csaba\": \"Base\",     \"Ron\": \"Base\", }  # Livello 3 ## Notiamo come solo Alessia abbia un account premium, quindi usiamo una comprehension per definire il dizionario customer_account_type = {     name: \"Premium\" if (name == \"Alessia\") else \"Base\"     for name in (         \"Mario\",         \"Alessia\",         \"Anita\",         \"Csaba\",         \"Ron\",     ) } <ol> <li>Definire un dizionario <code>customer_has_overdraft</code> le cui chiavi sono i clienti e i valori (Bool) contenengono <code>True</code> se il prodotto <code>Overdraft</code> \u00e8 attivo e <code>False</code> se non \u00e8 attivo, sfruttando il fatto che le chiavi di questo dizionario devono essere le stesse di quelle del dizionario precedente.</li> </ol> In\u00a0[5]: Copied! <pre># Notare come chiamare il metodo `keys` sia superfluo, l'iterazione avviene gi\u00e0 sulle chiavi del dizionario.\ncustomer_has_overdraft = {name: (name != \"Anita\") for name in customer_account_type}\n</pre> # Notare come chiamare il metodo `keys` sia superfluo, l'iterazione avviene gi\u00e0 sulle chiavi del dizionario. customer_has_overdraft = {name: (name != \"Anita\") for name in customer_account_type} <ol> <li>Definire un dizionario <code>customer_balance_last_year</code> le cui chiavi sono i clienti e i valori contenengono il saldo iniziale del conto del cliente.</li> </ol> In\u00a0[6]: Copied! <pre>customer_balance_last_year = {\n    \"Mario\": 1020.01,\n    \"Alessia\": 120.91,\n    \"Anita\": 32.12,\n    \"Csaba\": 1020.01,\n    \"Ron\": 0,\n}\n</pre> customer_balance_last_year = {     \"Mario\": 1020.01,     \"Alessia\": 120.91,     \"Anita\": 32.12,     \"Csaba\": 1020.01,     \"Ron\": 0, } <ol> <li>Per ogni cliente generare una lista di 12 numeri float tra -300.00 e 300.00 dove l'elemento di posto i rappresenta il saldo delle transazioni effettuate nell'i+1-esimo mese dell'anno. Mettiamo le liste in un dizionario e poi stampiamolo. Per eseguire questo esercizio avremo bisogno della funzione <code>randint</code> dal modulo <code>random</code>. Andiamo a leggerne la documentazione qui per capire come funziona.</li> </ol> In\u00a0[7]: Copied! <pre>import random\n\n# Livello 1\ntransaction_balance_mario = [(random.randint(-30_000, 30_000) / 100) for n in range(12)]\ntransaction_balance_alessia = [(random.randint(-30_000, 30_000) / 100) for n in range(12)]\ntransaction_balance_anita = [(random.randint(-30_000, 30_000) / 100) for n in range(12)]\ntransaction_balance_csaba = [(random.randint(-30_000, 30_000) / 100) for n in range(12)]\ntransaction_balance_ron = [(random.randint(-30_000, 30_000) / 100) for n in range(12)]\n\nprint(f\"Transazioni di Mario: {transaction_balance_mario}\")\nprint(f\"Transazioni di Alessia: {transaction_balance_alessia}\")\nprint(f\"Transazioni di Anita: {transaction_balance_anita}\")\nprint(f\"Transazioni di Csaba: {transaction_balance_csaba}\")\nprint(f\"Transazioni di Ron: {transaction_balance_ron}\")\n\ncustomer_transaction_balances = {\n    \"Mario\": transaction_balance_mario,\n    \"Alessia\": transaction_balance_alessia,\n    \"Anita\": transaction_balance_anita,\n    \"Csaba\": transaction_balance_csaba,\n    \"Ron\": transaction_balance_ron,\n}\nprint(\"\\n\" * 5)\nprint(customer_transaction_balances)\n</pre> import random  # Livello 1 transaction_balance_mario = [(random.randint(-30_000, 30_000) / 100) for n in range(12)] transaction_balance_alessia = [(random.randint(-30_000, 30_000) / 100) for n in range(12)] transaction_balance_anita = [(random.randint(-30_000, 30_000) / 100) for n in range(12)] transaction_balance_csaba = [(random.randint(-30_000, 30_000) / 100) for n in range(12)] transaction_balance_ron = [(random.randint(-30_000, 30_000) / 100) for n in range(12)]  print(f\"Transazioni di Mario: {transaction_balance_mario}\") print(f\"Transazioni di Alessia: {transaction_balance_alessia}\") print(f\"Transazioni di Anita: {transaction_balance_anita}\") print(f\"Transazioni di Csaba: {transaction_balance_csaba}\") print(f\"Transazioni di Ron: {transaction_balance_ron}\")  customer_transaction_balances = {     \"Mario\": transaction_balance_mario,     \"Alessia\": transaction_balance_alessia,     \"Anita\": transaction_balance_anita,     \"Csaba\": transaction_balance_csaba,     \"Ron\": transaction_balance_ron, } print(\"\\n\" * 5) print(customer_transaction_balances) <pre>Transazioni di Mario: [214.41, 155.23, -53.16, 223.3, -93.44, 78.04, 217.12, 191.73, 190.14, -136.2, -208.61, 148.69]\nTransazioni di Alessia: [145.03, -151.85, 244.6, -130.06, -101.34, 295.84, 255.28, 137.21, -194.67, -26.22, -69.31, 156.87]\nTransazioni di Anita: [-281.82, 33.51, 51.7, -181.74, -177.05, -73.61, -299.41, 56.23, -188.85, -202.55, 0.99, 269.57]\nTransazioni di Csaba: [-203.16, 68.98, 85.26, 298.5, 224.56, 189.65, -29.83, -174.34, 179.29, 176.38, -98.31, 9.16]\nTransazioni di Ron: [286.12, 142.93, -254.54, 117.05, -72.14, 70.95, 269.05, -111.33, 187.02, 121.24, 192.47, -15.81]\n\n\n\n\n\n\n{'Mario': [214.41, 155.23, -53.16, 223.3, -93.44, 78.04, 217.12, 191.73, 190.14, -136.2, -208.61, 148.69], 'Alessia': [145.03, -151.85, 244.6, -130.06, -101.34, 295.84, 255.28, 137.21, -194.67, -26.22, -69.31, 156.87], 'Anita': [-281.82, 33.51, 51.7, -181.74, -177.05, -73.61, -299.41, 56.23, -188.85, -202.55, 0.99, 269.57], 'Csaba': [-203.16, 68.98, 85.26, 298.5, 224.56, 189.65, -29.83, -174.34, 179.29, 176.38, -98.31, 9.16], 'Ron': [286.12, 142.93, -254.54, 117.05, -72.14, 70.95, 269.05, -111.33, 187.02, 121.24, 192.47, -15.81]}\n</pre> In\u00a0[8]: Copied! <pre># Livello 2\n# Alcune osservazioni:\n# a. scrivere una lista per ogni cliente e poi inserirla in un dizionario \u00e8 tedioso e c'\u00e8 molto codice ripetuto\n# b. le chiavi del dizionario sono sempre le stesse dei dizionari precedenti\n# c. il dizionario stampato \u00e8 illegibile, per questo usiamo la funzione `pprint` dal modulo omonimo.\n\nfrom pprint import pprint\n\n\n# Definiamo una funzione che ritorni direttamente la lista\ndef generate_transaction_balances(min_amount: int = -300, max_amount: int = 300, n_items=12):\n    from random import randint\n\n    return [randint(min_amount * 100, max_amount * 100) / 100 for n in range(n_items)]\n\n\n# Non \u00e8 strettamente necessario specificare gli argomenti nella funzione, dato che i default che abbiamo impostato\n# sono quelli che ci occorrono\ncustomer_transaction_balances = {name: generate_transaction_balances() for name in customer_account_type}\n\npprint(customer_transaction_balances)\n</pre> # Livello 2 # Alcune osservazioni: # a. scrivere una lista per ogni cliente e poi inserirla in un dizionario \u00e8 tedioso e c'\u00e8 molto codice ripetuto # b. le chiavi del dizionario sono sempre le stesse dei dizionari precedenti # c. il dizionario stampato \u00e8 illegibile, per questo usiamo la funzione `pprint` dal modulo omonimo.  from pprint import pprint   # Definiamo una funzione che ritorni direttamente la lista def generate_transaction_balances(min_amount: int = -300, max_amount: int = 300, n_items=12):     from random import randint      return [randint(min_amount * 100, max_amount * 100) / 100 for n in range(n_items)]   # Non \u00e8 strettamente necessario specificare gli argomenti nella funzione, dato che i default che abbiamo impostato # sono quelli che ci occorrono customer_transaction_balances = {name: generate_transaction_balances() for name in customer_account_type}  pprint(customer_transaction_balances) <pre>{'Alessia': [-48.55,\n             -123.1,\n             273.88,\n             -165.53,\n             -40.97,\n             82.18,\n             -187.38,\n             -203.85,\n             -42.55,\n             194.62,\n             -44.18,\n             88.26],\n 'Anita': [297.23,\n           203.91,\n           283.29,\n           -263.25,\n           -206.89,\n           -98.89,\n           -235.89,\n           -153.28,\n           -133.11,\n           271.7,\n           288.08,\n           -280.21],\n 'Csaba': [21.54,\n           185.09,\n           -79.57,\n           -256.57,\n           -183.77,\n           110.04,\n           168.79,\n           79.46,\n           244.9,\n           206.9,\n           102.57,\n           -19.35],\n 'Mario': [-155.92,\n           246.61,\n           237.69,\n           220.29,\n           -256.46,\n           76.07,\n           63.09,\n           154.98,\n           177.17,\n           -219.37,\n           177.32,\n           -286.15],\n 'Ron': [42.46,\n         -92.21,\n         48.92,\n         -189.43,\n         -120.5,\n         -168.66,\n         295.41,\n         -133.11,\n         -160.67,\n         -88.89,\n         46.82,\n         -177.11]}\n</pre> In\u00a0[9]: Copied! <pre># Livello 3\n# Notiamo come la funzione sia abbastanza semplice da non essere davvero necessaria\n# La scelta tra questa soluzione e la precedente \u00e8 dettata da preferenze personali\n\ncustomer_transaction_balances = {\n    name: [random.randint(-30_000, 30_000) / 100 for n in range(12)] for name in customer_account_type\n}\n\npprint(customer_transaction_balances)\n</pre> # Livello 3 # Notiamo come la funzione sia abbastanza semplice da non essere davvero necessaria # La scelta tra questa soluzione e la precedente \u00e8 dettata da preferenze personali  customer_transaction_balances = {     name: [random.randint(-30_000, 30_000) / 100 for n in range(12)] for name in customer_account_type }  pprint(customer_transaction_balances) <pre>{'Alessia': [-272.8,\n             -15.56,\n             139.61,\n             -131.86,\n             48.98,\n             -21.16,\n             66.71,\n             -201.56,\n             189.19,\n             -290.98,\n             212.97,\n             -177.5],\n 'Anita': [7.77,\n           -81.24,\n           70.87,\n           -46.33,\n           29.97,\n           -258.1,\n           -72.15,\n           90.4,\n           -276.98,\n           12.66,\n           84.3,\n           47.35],\n 'Csaba': [-135.5,\n           269.8,\n           -234.8,\n           -274.91,\n           -32.94,\n           -30.74,\n           236.79,\n           -161.41,\n           -183.99,\n           180.81,\n           38.32,\n           -130.47],\n 'Mario': [-196.42,\n           99.24,\n           293.78,\n           119.17,\n           199.38,\n           288.16,\n           -13.45,\n           233.33,\n           117.82,\n           255.33,\n           -39.4,\n           240.59],\n 'Ron': [-22.89,\n         222.03,\n         35.92,\n         240.09,\n         -155.89,\n         -284.17,\n         291.43,\n         267.83,\n         41.65,\n         -122.17,\n         147.85,\n         -198.9]}\n</pre> <p>Siccome vogliamo che i passi seguenti siano identici per tutti, useremo delle liste predefinite. Copia il codice seguente e incollalo in una nuova cella.</p> <pre>customer_transaction_balances = {\n    \"Mario\": [-289.16, 57.17, -92.70, 56.69, -24.68, 75.02, 197.91, 191.07, -103.75, -96.43, -133.06, 118.55],\n    \"Alessia\": [-252.23, -114.19, 94.51, -178.26, -280.96, 158.67, -257.44, 284.49, -196.76, -241.04, 298.32, 192.75],\n    \"Anita\": [-20.76, 52.88, 0.00, -210.23, 210.23, 0.00, 0.00, 0.00, 0.00, 114.48, -110.57, 195.32],\n    \"Csaba\": [-114.24, -47.49, -91.33, 259.19, -56.47, -175.55, 246.66, 201.63, -165.04, 244.74, 132.45, 106.47],\n    \"Ron\": [-10.86, -73.45, 30.32, 52.99, 247.69, -85.21, -187.80, 99.48, -171.33, -16.24, 183.08, 234.57]\n}\n</pre> In\u00a0[10]: Copied! <pre>customer_transaction_balances = {\n    \"Mario\": [-289.16, 57.17, -92.70, 56.69, -24.68, 75.02, 197.91, 191.07, -103.75, -96.43, -133.06, 118.55],\n    \"Alessia\": [-252.23, -114.19, -194.51, -178.26, -280.96, 158.67, -257.44, -284.49, -196.76, -241.04, 298.32, 192.75],\n    \"Anita\": [-20.76, 52.88, 0.00, -210.23, 210.23, 0.00, 0.00, 0.00, 0.00, 114.48, -110.57, 195.32],\n    \"Csaba\": [-114.24, -47.49, -91.33, 259.19, -56.47, -175.55, 246.66, 201.63, -165.04, 244.74, 132.45, 106.47],\n    \"Ron\": [-10.86, -73.45, 30.32, 52.99, 247.69, -85.21, -187.80, 99.48, -171.33, -16.24, 183.08, 234.57]\n}\n</pre> customer_transaction_balances = {     \"Mario\": [-289.16, 57.17, -92.70, 56.69, -24.68, 75.02, 197.91, 191.07, -103.75, -96.43, -133.06, 118.55],     \"Alessia\": [-252.23, -114.19, -194.51, -178.26, -280.96, 158.67, -257.44, -284.49, -196.76, -241.04, 298.32, 192.75],     \"Anita\": [-20.76, 52.88, 0.00, -210.23, 210.23, 0.00, 0.00, 0.00, 0.00, 114.48, -110.57, 195.32],     \"Csaba\": [-114.24, -47.49, -91.33, 259.19, -56.47, -175.55, 246.66, 201.63, -165.04, 244.74, 132.45, 106.47],     \"Ron\": [-10.86, -73.45, 30.32, 52.99, 247.69, -85.21, -187.80, 99.48, -171.33, -16.24, 183.08, 234.57] } In\u00a0[11]: Copied! <pre># Gennaio \u00e8 il primo mese, dunque ha indice 0\nif customer_transaction_balances[\"Mario\"][0] != 0:\n    print(\"Mario ha effettuato transazioni a Gennaio\")\nelse:\n    print(\"Mario non ha effettuato transazioni a Gennaio\")\n</pre> # Gennaio \u00e8 il primo mese, dunque ha indice 0 if customer_transaction_balances[\"Mario\"][0] != 0:     print(\"Mario ha effettuato transazioni a Gennaio\") else:     print(\"Mario non ha effettuato transazioni a Gennaio\") <pre>Mario ha effettuato transazioni a Gennaio\n</pre> <ol> <li>Verificare se la somma delle transazioni di Alessia siano negative</li> </ol> In\u00a0[12]: Copied! <pre># Livello 1\ntotal_alessia = 0\nfor n in range(len(customer_transaction_balances[\"Alessia\"])):\n    total_alessia = total_alessia + customer_transaction_balances[\"Alessia\"][n]\n\nif total_alessia &lt; 0:\n    print(\"La somma delle transazioni di Alessia \u00e8 negativa\")\nelse:\n    print(\"La somma delle transazioni di Alessia \u00e8 positivia\")\n\n# Livello 2\n# Non occorre usare range e len, possiamo iterare direttamente sugli elementi della lista\ntotal_alessia = 0\nfor transaction in customer_transaction_balances[\"Alessia\"]:\n    total_alessia = total_alessia + transaction\n\nif total_alessia &lt; 0:\n    print(\"La somma delle transazioni di Alessia \u00e8 negativa\")\nelse:\n    print(\"La somma delle transazioni di Alessia \u00e8 positiva\")\n\n# Livello 3\n# Introduciamo un piccolo miglioramento con l'operatore di assegnazione con addizione (`+=`)\ntotal_alessia = 0\nfor transaction in customer_transaction_balances[\"Alessia\"]:\n    total_alessia += transaction\n\nif total_alessia &lt; 0:\n    print(\"La somma delle transazioni di Alessia \u00e8 negativa\")\nelse:\n    print(\"La somma delle transazioni di Alessia \u00e8 positiva\")\n\n# Livello 4\n# La funzione `sum` \u00e8 una funzione built-in (disponibile senza dover importare nulla)\ntotal_alessia = sum(customer_transaction_balances[\"Alessia\"])\n\nif total_alessia &lt; 0:\n    print(\"La somma delle transazioni di Alessia \u00e8 negativa\")\nelse:\n    print(\"La somma delle transazioni di Alessia \u00e8 positiva\")\n</pre> # Livello 1 total_alessia = 0 for n in range(len(customer_transaction_balances[\"Alessia\"])):     total_alessia = total_alessia + customer_transaction_balances[\"Alessia\"][n]  if total_alessia &lt; 0:     print(\"La somma delle transazioni di Alessia \u00e8 negativa\") else:     print(\"La somma delle transazioni di Alessia \u00e8 positivia\")  # Livello 2 # Non occorre usare range e len, possiamo iterare direttamente sugli elementi della lista total_alessia = 0 for transaction in customer_transaction_balances[\"Alessia\"]:     total_alessia = total_alessia + transaction  if total_alessia &lt; 0:     print(\"La somma delle transazioni di Alessia \u00e8 negativa\") else:     print(\"La somma delle transazioni di Alessia \u00e8 positiva\")  # Livello 3 # Introduciamo un piccolo miglioramento con l'operatore di assegnazione con addizione (`+=`) total_alessia = 0 for transaction in customer_transaction_balances[\"Alessia\"]:     total_alessia += transaction  if total_alessia &lt; 0:     print(\"La somma delle transazioni di Alessia \u00e8 negativa\") else:     print(\"La somma delle transazioni di Alessia \u00e8 positiva\")  # Livello 4 # La funzione `sum` \u00e8 una funzione built-in (disponibile senza dover importare nulla) total_alessia = sum(customer_transaction_balances[\"Alessia\"])  if total_alessia &lt; 0:     print(\"La somma delle transazioni di Alessia \u00e8 negativa\") else:     print(\"La somma delle transazioni di Alessia \u00e8 positiva\") <pre>La somma delle transazioni di Alessia \u00e8 negativa\nLa somma delle transazioni di Alessia \u00e8 negativa\nLa somma delle transazioni di Alessia \u00e8 negativa\nLa somma delle transazioni di Alessia \u00e8 negativa\n</pre> <ol> <li>Stampare tutte le transazioni di Mario usando la dicitura \"Transazioni Mario : \u20ac\" (e.g. per il mese di Aprile \"Transazioni Mario Aprile:3 \u20ac\"). hint</li> </ol> In\u00a0[13]: Copied! <pre># Livello 1\n# Ci occorre la lista dei mesi\nmonths = [\n    \"Gennaio\",\n    \"Febbraio\",\n    \"Marzo\",\n    \"Aprile\",\n    \"Maggio\",\n    \"Giugno\",\n    \"Luglio\",\n    \"Agosto\",\n    \"Settembre\",\n    \"Ottobre\",\n    \"Novembre\",\n    \"Dicembre\",\n]\n\n# Iteriamo sulla lista delle transazioni di Mario e stampiamo l'elemento di posto corrispondente dalla lista dei mesi.\nfor i in range(len(customer_transaction_balances[\"Mario\"])):\n    print(f\"Transazioni Mario {months[i]}: {customer_transaction_balances['Mario'][i]} \u20ac\")\n</pre> # Livello 1 # Ci occorre la lista dei mesi months = [     \"Gennaio\",     \"Febbraio\",     \"Marzo\",     \"Aprile\",     \"Maggio\",     \"Giugno\",     \"Luglio\",     \"Agosto\",     \"Settembre\",     \"Ottobre\",     \"Novembre\",     \"Dicembre\", ]  # Iteriamo sulla lista delle transazioni di Mario e stampiamo l'elemento di posto corrispondente dalla lista dei mesi. for i in range(len(customer_transaction_balances[\"Mario\"])):     print(f\"Transazioni Mario {months[i]}: {customer_transaction_balances['Mario'][i]} \u20ac\") <pre>Transazioni Mario Gennaio: -289.16 \u20ac\nTransazioni Mario Febbraio: 57.17 \u20ac\nTransazioni Mario Marzo: -92.7 \u20ac\nTransazioni Mario Aprile: 56.69 \u20ac\nTransazioni Mario Maggio: -24.68 \u20ac\nTransazioni Mario Giugno: 75.02 \u20ac\nTransazioni Mario Luglio: 197.91 \u20ac\nTransazioni Mario Agosto: 191.07 \u20ac\nTransazioni Mario Settembre: -103.75 \u20ac\nTransazioni Mario Ottobre: -96.43 \u20ac\nTransazioni Mario Novembre: -133.06 \u20ac\nTransazioni Mario Dicembre: 118.55 \u20ac\n</pre> In\u00a0[14]: Copied! <pre># Livello 2\n# Usiamo la funzione `zip` che fa automaticamente l'intreccio tra le due liste\nmonths = [\n    \"Gennaio\",\n    \"Febbraio\",\n    \"Marzo\",\n    \"Aprile\",\n    \"Maggio\",\n    \"Giugno\",\n    \"Luglio\",\n    \"Agosto\",\n    \"Settembre\",\n    \"Ottobre\",\n    \"Novembre\",\n    \"Dicembre\",\n]\nfor month, balance in zip(months, customer_transaction_balances[\"Mario\"], strict=True):\n    print(f\"Transazioni Mario {month}: {balance} \u20ac\")\n</pre> # Livello 2 # Usiamo la funzione `zip` che fa automaticamente l'intreccio tra le due liste months = [     \"Gennaio\",     \"Febbraio\",     \"Marzo\",     \"Aprile\",     \"Maggio\",     \"Giugno\",     \"Luglio\",     \"Agosto\",     \"Settembre\",     \"Ottobre\",     \"Novembre\",     \"Dicembre\", ] for month, balance in zip(months, customer_transaction_balances[\"Mario\"], strict=True):     print(f\"Transazioni Mario {month}: {balance} \u20ac\") <pre>Transazioni Mario Gennaio: -289.16 \u20ac\nTransazioni Mario Febbraio: 57.17 \u20ac\nTransazioni Mario Marzo: -92.7 \u20ac\nTransazioni Mario Aprile: 56.69 \u20ac\nTransazioni Mario Maggio: -24.68 \u20ac\nTransazioni Mario Giugno: 75.02 \u20ac\nTransazioni Mario Luglio: 197.91 \u20ac\nTransazioni Mario Agosto: 191.07 \u20ac\nTransazioni Mario Settembre: -103.75 \u20ac\nTransazioni Mario Ottobre: -96.43 \u20ac\nTransazioni Mario Novembre: -133.06 \u20ac\nTransazioni Mario Dicembre: 118.55 \u20ac\n</pre> In\u00a0[15]: Copied! <pre># Livello 3\n# Elencare i nomi dei mesi \u00e8 tedioso, ma la domanda da porsi davanti ad un compito tedioso in programmazione \u00e8 sempre:\n# &gt; Possibile che io sia la prima persona a scontrarsi con questo problema?\"\n# e la risposta \u00e8 sempre \"No!\"\n# Da una veloce ricerca su Google scopriamo infatti che esiste il modulo `calendar` per stampare i mesi.\nimport locale\nfrom calendar import month_name\n\n# Impostiamo la localizzazione in italiano in modo da avere i nomi in italiano.\nlocale.setlocale(locale.LC_TIME, \"it_IT.UTF-8\")\n\n# Usiamo lo slicing per ottenere i nomi dei mesi che si trovano alle posizioni 1-12\nfor month, balance in zip(month_name[1:13], customer_transaction_balances[\"Mario\"], strict=True):\n    print(f\"Transazioni Mario {month}: {balance} \u20ac\")\n</pre> # Livello 3 # Elencare i nomi dei mesi \u00e8 tedioso, ma la domanda da porsi davanti ad un compito tedioso in programmazione \u00e8 sempre: # &gt; Possibile che io sia la prima persona a scontrarsi con questo problema?\" # e la risposta \u00e8 sempre \"No!\" # Da una veloce ricerca su Google scopriamo infatti che esiste il modulo `calendar` per stampare i mesi. import locale from calendar import month_name  # Impostiamo la localizzazione in italiano in modo da avere i nomi in italiano. locale.setlocale(locale.LC_TIME, \"it_IT.UTF-8\")  # Usiamo lo slicing per ottenere i nomi dei mesi che si trovano alle posizioni 1-12 for month, balance in zip(month_name[1:13], customer_transaction_balances[\"Mario\"], strict=True):     print(f\"Transazioni Mario {month}: {balance} \u20ac\") <pre>\n---------------------------------------------------------------------------\nError                                     Traceback (most recent call last)\nCell In[15], line 10\n      7 from calendar import month_name\n      9 # Impostiamo la localizzazione in italiano in modo da avere i nomi in italiano.\n---&gt; 10 locale.setlocale(locale.LC_TIME, \"it_IT.UTF-8\")\n     12 # Usiamo lo slicing per ottenere i nomi dei mesi che si trovano alle posizioni 1-12\n     13 for month, balance in zip(month_name[1:13], customer_transaction_balances[\"Mario\"], strict=True):\n\nFile /opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/locale.py:615, in setlocale(category, locale)\n    612 if locale and not isinstance(locale, _builtin_str):\n    613     # convert to string\n    614     locale = normalize(_build_localename(locale))\n--&gt; 615 return _setlocale(category, locale)\n\nError: unsupported locale setting</pre> <ol> <li>Ripetere quanto fatto con Mario anche con Alessia, ma stavolta stampando \"Mese con saldo negativo\" se l'importo \u00e8 negativo.</li> </ol> In\u00a0[16]: Copied! <pre># Usiamo l'operatore ternario.\nfor month, balance in zip(months, customer_transaction_balances[\"Alessia\"], strict=True):\n    msg = f\"Transazioni Alessia {month}: {balance} \u20ac\" if balance &gt; 0 else \"Mese negativo\"\n    print(msg)\n</pre> # Usiamo l'operatore ternario. for month, balance in zip(months, customer_transaction_balances[\"Alessia\"], strict=True):     msg = f\"Transazioni Alessia {month}: {balance} \u20ac\" if balance &gt; 0 else \"Mese negativo\"     print(msg) <pre>Mese negativo\nMese negativo\nMese negativo\nMese negativo\nMese negativo\nTransazioni Alessia Giugno: 158.67 \u20ac\nMese negativo\nMese negativo\nMese negativo\nMese negativo\nTransazioni Alessia Novembre: 298.32 \u20ac\nTransazioni Alessia Dicembre: 192.75 \u20ac\n</pre> In\u00a0[17]: Copied! <pre># Livello 1\ndef get_transaction_sign(transaction):\n    return transaction &lt; 0\n\n\n# Livello 2\n# La funzione non pu\u00f2 essere migliorata oltre in termini di leggibilit\u00e0 o di ottimizzazione, ma pu\u00f2 essere documentata\n# meglio usando le docstrings e le annotazioni di tipo. Le docstring sono stringhe di documentazione che spiegano cosa\n# fa la funzione, che tipo di argomenti si aspetta di ricevere, che cosa ritorna\ndef get_transaction_sign(transaction: int) -&gt; bool:\n    \"\"\"Tells if the transaction has a negative sign.\n\n    Args:\n        transaction (int): the transaction to analyze.\n\n    Returns:\n        bool: True if the transaction is negative, False otherwise.\n    \"\"\"\n    return transaction &lt; 0\n</pre> # Livello 1 def get_transaction_sign(transaction):     return transaction &lt; 0   # Livello 2 # La funzione non pu\u00f2 essere migliorata oltre in termini di leggibilit\u00e0 o di ottimizzazione, ma pu\u00f2 essere documentata # meglio usando le docstrings e le annotazioni di tipo. Le docstring sono stringhe di documentazione che spiegano cosa # fa la funzione, che tipo di argomenti si aspetta di ricevere, che cosa ritorna def get_transaction_sign(transaction: int) -&gt; bool:     \"\"\"Tells if the transaction has a negative sign.      Args:         transaction (int): the transaction to analyze.      Returns:         bool: True if the transaction is negative, False otherwise.     \"\"\"     return transaction &lt; 0 <ol> <li>Definire una funzione <code>get_transaction_sum</code> che riceva in input la lista delle transazioni e fornisca in output la somma delle transazioni. Verificare il risultato della funzione usando la lista delle transazioni di Alessia e confrontandolo con l'esercizio della sezione control flow.</li> </ol> In\u00a0[18]: Copied! <pre>def get_transaction_sum(transactions: list[int]) -&gt; int:\n    \"\"\"Sums all the transactions.\n\n    Args:\n        transactions (list[int]): list of transactions to sum.\n\n    Returns:\n        int: sum of the transactions in the input list.\n    \"\"\"\n    return sum(transactions)\n</pre> def get_transaction_sum(transactions: list[int]) -&gt; int:     \"\"\"Sums all the transactions.      Args:         transactions (list[int]): list of transactions to sum.      Returns:         int: sum of the transactions in the input list.     \"\"\"     return sum(transactions) <ol> <li>Definire una funzione <code>get_overdraft_monthly_fees</code> che, dato un importo di scoperto, restituisca la commissione da pagare per quel dato mese.</li> </ol> In\u00a0[19]: Copied! <pre># Rivediamo le regole definite all'inizio\n# - 1 \u20ac fino a 1500 \u20ac.\n# - 3.5 \u20ac fino a 3000 \u20ac.\n# - 6 \u20ac fino a 5000 \u20ac.\n# - 6 \u20ac + 0.05% della somma eccedente i 5000 \u20ac per gli importi sopra i 5000 \u20ac.\n\n# Level 1\ndef get_overdraft_monthly_fees(overdraft_amount: float) -&gt; float:\n    \"\"\"Calculate the monthly overdraft fees in euros based on the overdraft amount.\n\n    This function calculates the monthly fees in euros for an overdraft based on the\n    given overdraft amount. The fees are determined as follows:\n    - Overdraft up to \u20ac1500: \u20ac1 fee\n    - Overdraft from \u20ac1501 to \u20ac3000: \u20ac3.5 fee\n    - Overdraft from \u20ac3001 to \u20ac5000: \u20ac6 fee\n    - Overdraft above \u20ac5000: \u20ac6 plus an additional 0.05% of the amount over \u20ac5000\n\n    Args:\n        overdraft_amount (float): The amount of overdraft in euros.\n\n    Returns:\n        float: The calculated monthly fee in euros for the overdraft.\n    \"\"\"\n    if overdraft_amount &lt;= 1500:\n        overdraft_monthly_fees = 1\n    elif overdraft_amount &lt;= 3000:\n        overdraft_monthly_fees = 3.5\n    elif overdraft_amount &lt;= 5000:\n        overdraft_monthly_fees = 6\n    else:\n        overdraft_monthly_fees = 6 + (overdraft_amount - 5000) * (0.05 / 100)\n    return overdraft_monthly_fees\n\n\n# Level 2\n# Le condizioni sono mutualmente esclusive (c'\u00e8 l'`elif``) quindi le controlliamo una alla volta fino a che non ne\n# troviamo una verificata, ma allora assegnare la variabile al solo scopo di ritornarla \u00e8 superfluo e peggiora la\n# leggibilit\u00e0. Notare come usiamo `if` invece di `elif`, dato che il `return` ci assicura di fermarci alla prima\n# condizione soddisfatta.\ndef get_overdraft_monthly_fees(overdraft_amount: float) -&gt; float:\n    \"\"\"Calculate the monthly overdraft fees in euros based on the overdraft amount.\n\n    This function calculates the monthly fees in euros for an overdraft based on the\n    given overdraft amount. The fees are determined as follows:\n    - Overdraft up to \u20ac1500: \u20ac1 fee\n    - Overdraft from \u20ac1501 to \u20ac3000: \u20ac3.5 fee\n    - Overdraft from \u20ac3001 to \u20ac5000: \u20ac6 fee\n    - Overdraft above \u20ac5000: \u20ac6 plus an additional 0.05% of the amount over \u20ac5000\n\n    Args:\n        overdraft_amount (float): The amount of overdraft in euros.\n\n    Returns:\n        float: The calculated monthly fee in euros for the overdraft.\n    \"\"\"\n    if overdraft_amount &lt;= 1500:\n        return 1\n    if overdraft_amount &lt;= 3000:\n        return 3.5\n    if overdraft_amount &lt;= 5000:\n        return 6\n    return 6 + (overdraft_amount - 5000) * (0.05 / 100)\n\n\n# Level 3\n# C'\u00e8 un problema con l'implementazione precedente: non controlliamo che l'ammontare dello scoperto che ci viene\n# passato sia positivo!\ndef get_overdraft_monthly_fees(overdraft_amount: float) -&gt; float:\n    \"\"\"Calculate the monthly overdraft fees in euros based on the overdraft amount.\n\n    This function calculates the monthly fees in euros for an overdraft based on the\n    given overdraft amount. The fees are determined as follows:\n    - Overdraft up to \u20ac1500: \u20ac1 fee\n    - Overdraft from \u20ac1501 to \u20ac3000: \u20ac3.5 fee\n    - Overdraft from \u20ac3001 to \u20ac5000: \u20ac6 fee\n    - Overdraft above \u20ac5000: \u20ac6 plus an additional 0.05% of the amount over \u20ac5000\n\n    Args:\n        overdraft_amount (float): The amount of overdraft in euros.\n\n    Returns:\n        float: The calculated monthly fee in euros for the overdraft.\n    \"\"\"\n    if overdraft_amount &lt; 0:\n        raise ValueError(\"Overdraft amount must be a positive number\")\n    if overdraft_amount &lt;= 1500:\n        return 1\n    if overdraft_amount &lt;= 3000:\n        return 3.5\n    if overdraft_amount &lt;= 5000:\n        return 6\n    return 6 + (overdraft_amount - 5000) * (0.05 / 100)\n</pre> # Rivediamo le regole definite all'inizio # - 1 \u20ac fino a 1500 \u20ac. # - 3.5 \u20ac fino a 3000 \u20ac. # - 6 \u20ac fino a 5000 \u20ac. # - 6 \u20ac + 0.05% della somma eccedente i 5000 \u20ac per gli importi sopra i 5000 \u20ac.  # Level 1 def get_overdraft_monthly_fees(overdraft_amount: float) -&gt; float:     \"\"\"Calculate the monthly overdraft fees in euros based on the overdraft amount.      This function calculates the monthly fees in euros for an overdraft based on the     given overdraft amount. The fees are determined as follows:     - Overdraft up to \u20ac1500: \u20ac1 fee     - Overdraft from \u20ac1501 to \u20ac3000: \u20ac3.5 fee     - Overdraft from \u20ac3001 to \u20ac5000: \u20ac6 fee     - Overdraft above \u20ac5000: \u20ac6 plus an additional 0.05% of the amount over \u20ac5000      Args:         overdraft_amount (float): The amount of overdraft in euros.      Returns:         float: The calculated monthly fee in euros for the overdraft.     \"\"\"     if overdraft_amount &lt;= 1500:         overdraft_monthly_fees = 1     elif overdraft_amount &lt;= 3000:         overdraft_monthly_fees = 3.5     elif overdraft_amount &lt;= 5000:         overdraft_monthly_fees = 6     else:         overdraft_monthly_fees = 6 + (overdraft_amount - 5000) * (0.05 / 100)     return overdraft_monthly_fees   # Level 2 # Le condizioni sono mutualmente esclusive (c'\u00e8 l'`elif``) quindi le controlliamo una alla volta fino a che non ne # troviamo una verificata, ma allora assegnare la variabile al solo scopo di ritornarla \u00e8 superfluo e peggiora la # leggibilit\u00e0. Notare come usiamo `if` invece di `elif`, dato che il `return` ci assicura di fermarci alla prima # condizione soddisfatta. def get_overdraft_monthly_fees(overdraft_amount: float) -&gt; float:     \"\"\"Calculate the monthly overdraft fees in euros based on the overdraft amount.      This function calculates the monthly fees in euros for an overdraft based on the     given overdraft amount. The fees are determined as follows:     - Overdraft up to \u20ac1500: \u20ac1 fee     - Overdraft from \u20ac1501 to \u20ac3000: \u20ac3.5 fee     - Overdraft from \u20ac3001 to \u20ac5000: \u20ac6 fee     - Overdraft above \u20ac5000: \u20ac6 plus an additional 0.05% of the amount over \u20ac5000      Args:         overdraft_amount (float): The amount of overdraft in euros.      Returns:         float: The calculated monthly fee in euros for the overdraft.     \"\"\"     if overdraft_amount &lt;= 1500:         return 1     if overdraft_amount &lt;= 3000:         return 3.5     if overdraft_amount &lt;= 5000:         return 6     return 6 + (overdraft_amount - 5000) * (0.05 / 100)   # Level 3 # C'\u00e8 un problema con l'implementazione precedente: non controlliamo che l'ammontare dello scoperto che ci viene # passato sia positivo! def get_overdraft_monthly_fees(overdraft_amount: float) -&gt; float:     \"\"\"Calculate the monthly overdraft fees in euros based on the overdraft amount.      This function calculates the monthly fees in euros for an overdraft based on the     given overdraft amount. The fees are determined as follows:     - Overdraft up to \u20ac1500: \u20ac1 fee     - Overdraft from \u20ac1501 to \u20ac3000: \u20ac3.5 fee     - Overdraft from \u20ac3001 to \u20ac5000: \u20ac6 fee     - Overdraft above \u20ac5000: \u20ac6 plus an additional 0.05% of the amount over \u20ac5000      Args:         overdraft_amount (float): The amount of overdraft in euros.      Returns:         float: The calculated monthly fee in euros for the overdraft.     \"\"\"     if overdraft_amount &lt; 0:         raise ValueError(\"Overdraft amount must be a positive number\")     if overdraft_amount &lt;= 1500:         return 1     if overdraft_amount &lt;= 3000:         return 3.5     if overdraft_amount &lt;= 5000:         return 6     return 6 + (overdraft_amount - 5000) * (0.05 / 100) In\u00a0[20]: Copied! <pre># Level 1\nclass Customer:\n    def __init__(\n        self,\n        name: str,\n        account_type: str,\n        has_overdraft_service: bool,\n        balance: float,\n    ):\n        self.name = name\n        self.account_type = account_type\n        self.has_overdraft_service = has_overdraft_service\n        self.balance = balance\n\n\nmario = Customer(\"Mario\", \"Base\", True, 1020.01)\n\n# Level 2\n# Sarebbe utile tenere traccia dei costi del conto premium e del servizio di scoperto sono utili\n</pre> # Level 1 class Customer:     def __init__(         self,         name: str,         account_type: str,         has_overdraft_service: bool,         balance: float,     ):         self.name = name         self.account_type = account_type         self.has_overdraft_service = has_overdraft_service         self.balance = balance   mario = Customer(\"Mario\", \"Base\", True, 1020.01)  # Level 2 # Sarebbe utile tenere traccia dei costi del conto premium e del servizio di scoperto sono utili <ol> <li>Ridefiniamo la classe aggiungendo un metodo `get_fees`` che restituisca il costo del conto del cliente. Stampiamo il messaggio \"Commissioni mensili Mario (conto: ): \".</li> </ol> In\u00a0[21]: Copied! <pre>class Customer:\n    def __init__(\n        self,\n        name: str,\n        account_type: str,\n        has_overdraft_service: bool,\n        balance: float,\n    ):\n        self.name = name\n        self.account_type = account_type\n        self.has_overdraft_service = has_overdraft_service\n        self.balance = balance\n\n    def get_fees(self) -&gt; float:\n        return 4.00 if (self.account_type == \"Premium\") else 0.00\n\n\nmario = Customer(\"Mario\", \"Base\", True, 1020.01)\nmario.get_fees()\n</pre> class Customer:     def __init__(         self,         name: str,         account_type: str,         has_overdraft_service: bool,         balance: float,     ):         self.name = name         self.account_type = account_type         self.has_overdraft_service = has_overdraft_service         self.balance = balance      def get_fees(self) -&gt; float:         return 4.00 if (self.account_type == \"Premium\") else 0.00   mario = Customer(\"Mario\", \"Base\", True, 1020.01) mario.get_fees() Out[21]: <pre>0.0</pre> <ol> <li>Aggiungiamo un metodo <code>upgrade</code>che modifica il tipo di conto facendolo passare a Premium. Cambiamo il tipo di conto di Mario e invochiamo nuovamente il metodo <code>get_fees</code>.</li> </ol> In\u00a0[22]: Copied! <pre>class Customer:\n    def __init__(\n        self,\n        name: str,\n        account_type: str,\n        has_overdraft_service: bool,\n        balance: float,\n    ):\n        self.name = name\n        self.account_type = account_type\n        self.has_overdraft_service = has_overdraft_service\n        self.balance = balance\n\n    def get_fees(self) -&gt; float:\n        return 4.00 if (self.account_type == \"Premium\") else 0\n\n    def upgrade(self) -&gt; None:\n        self.account_type = \"Premium\"\n\n\nmario = Customer(\"Mario\", \"Base\", True, 1020.01)\nprint(f\"Commissioni mensili {mario.name} (conto: {mario.account_type}): {mario.get_fees()}\")\nmario.upgrade()\nprint(f\"Commissioni mensili {mario.name} (conto: {mario.account_type}): {mario.get_fees()}\")\n</pre> class Customer:     def __init__(         self,         name: str,         account_type: str,         has_overdraft_service: bool,         balance: float,     ):         self.name = name         self.account_type = account_type         self.has_overdraft_service = has_overdraft_service         self.balance = balance      def get_fees(self) -&gt; float:         return 4.00 if (self.account_type == \"Premium\") else 0      def upgrade(self) -&gt; None:         self.account_type = \"Premium\"   mario = Customer(\"Mario\", \"Base\", True, 1020.01) print(f\"Commissioni mensili {mario.name} (conto: {mario.account_type}): {mario.get_fees()}\") mario.upgrade() print(f\"Commissioni mensili {mario.name} (conto: {mario.account_type}): {mario.get_fees()}\") <pre>Commissioni mensili Mario (conto: Base): 0\nCommissioni mensili Mario (conto: Premium): 4.0\n</pre> In\u00a0[23]: Copied! <pre># Il saldo di fine anno di ciascun cliente non \u00e8 altro che la somma dei saldi mensili pi\u00f9 il saldo dell'anno precedente.\n# Abbiamo gi\u00e0 implementato tutti gli elementi per risolvere il problema, non ci rimane che usarli.\n\n# Calcoliamo prima i totali dell'anno corrente, creando un nuovo dizionario a partire da quello che contiene le liste\n# dei saldi mensili delle transazioni del cliente.\ncustomer_balance_current_year = {\n    name: get_transaction_sum(customer_transaction_balances[name]) for name in customer_transaction_balances\n}\n\n# Sommiamo poi il saldo dell'anno precedente e stampiamo il risultato.\ncustomer_balance_final = {\n    name: (current_year_total + customer_balance_last_year[name])\n    for name, current_year_total in customer_balance_current_year.items()\n}\n\npprint(customer_balance_final)\n</pre> # Il saldo di fine anno di ciascun cliente non \u00e8 altro che la somma dei saldi mensili pi\u00f9 il saldo dell'anno precedente. # Abbiamo gi\u00e0 implementato tutti gli elementi per risolvere il problema, non ci rimane che usarli.  # Calcoliamo prima i totali dell'anno corrente, creando un nuovo dizionario a partire da quello che contiene le liste # dei saldi mensili delle transazioni del cliente. customer_balance_current_year = {     name: get_transaction_sum(customer_transaction_balances[name]) for name in customer_transaction_balances }  # Sommiamo poi il saldo dell'anno precedente e stampiamo il risultato. customer_balance_final = {     name: (current_year_total + customer_balance_last_year[name])     for name, current_year_total in customer_balance_current_year.items() }  pprint(customer_balance_final) <pre>{'Alessia': -1229.2299999999998,\n 'Anita': 263.46999999999997,\n 'Csaba': 1561.03,\n 'Mario': 976.64,\n 'Ron': 303.24}\n</pre> <ol> <li>Mostrare a video i nomi dei clienti che hanno utilizzato il servizio di scoperto e i mesi in cui lo hanno fatto.</li> </ol> In\u00a0[24]: Copied! <pre># Per capire se un cliente ha utilizzato il servizio di scoperto in un dato mese bisogna controllare se il saldo in quel\n# mese fosse negativo. Dobbiamo quindi per ciascun cliente:\n# - partire dal saldo alla fine dell'anno precedente\n# - aggiungere il saldo delle transazioni di Gennaio\n# - se il valore ottenuto \u00e8 negativo salvare il nome del cliente e del mese in una collezione\n# - ripetere per i mesi successivi\n\n\n# Level 1\ncustomer_overdraft_usage = {}\n\nfor customer_name, starting_balance in customer_balance_last_year.items():\n    print(f\"Analisi del cliente {customer_name}\")\n\n    # Inizializziamo una lista vuota per tenere traccia dei mesi in cui il cliente attuale ha usato lo scoperto.\n    current_customer_overdraft_months = []\n\n    # Fermiamoci immediatamente se il cliente non ha attivo il servizio di scoperto.\n    if customer_has_overdraft[customer_name] == False:\n        print(f\"Il cliente {customer_name} non ha attivo il servizio di scoperto.\")\n        # Aggiungiamo una lista vuota nel dizionario per il cliente attuale\n        customer_overdraft_usage[customer_name] = []\n\n        continue\n    # Inizializziamo al fine anno precedente\n    balance_at_months_end = starting_balance\n    # Iteriamo sui mesi\n    for n_month in range(N_MONTHS):\n        month_name = months[n_month]\n        print(f\"Analisi del mese {month_name} per il cliente {customer_name}.\")\n        # Aggiungiamo il saldo delle transazioni del mese in esame\n        balance_at_months_end += customer_transaction_balances[customer_name][n_month]\n        # Se siamo in negativo, dobbiamo aggiungere il nome del mese corrente alla lista\n        if balance_at_months_end &lt; 0:\n            print(f\"Il cliente {customer_name} ha un saldo di {balance_at_months_end} nel mese di {month_name}.\")\n            current_customer_overdraft_months.append(month_name)\n\n    # Completata l'iterazione sui mesi abbiamo che la lista current_customer_overdraft_months contiene i nomi dei mesi\n    # in cui il cliente attualmente in considerazione ha usato lo scoperto, dobbiamo solo salvarlo nel dizionario che\n    # abbiamo predisposto in precedenza\n    customer_overdraft_usage[customer_name] = current_customer_overdraft_months\n\npprint(customer_overdraft_usage)\n\n# Level 2\n# Introduciamo alcune migliorie: quando abbiamo bisogno sia dell'indice che dell'elemento in una iterazione possiamo\n# usare enumerate. Inoltre possiamo verificare che una condizione \u00e8 falsa tramite l'operatore not\ncustomer_overdraft_usage = {}\n\nfor customer_name, starting_balance in customer_balance_last_year.items():\n    if not customer_has_overdraft[customer_name]:\n        customer_overdraft_usage[customer_name] = []\n        continue\n\n    balance_at_months_end = starting_balance\n    overdraft_months = []\n\n    for n_month, month in enumerate(months):\n        balance_at_months_end += customer_transaction_balances[customer_name][n_month]\n        if balance_at_months_end &lt; 0:\n            overdraft_months.append(month)\n\n    customer_overdraft_usage[customer_name] = overdraft_months\n\npprint(customer_overdraft_usage)\n</pre> # Per capire se un cliente ha utilizzato il servizio di scoperto in un dato mese bisogna controllare se il saldo in quel # mese fosse negativo. Dobbiamo quindi per ciascun cliente: # - partire dal saldo alla fine dell'anno precedente # - aggiungere il saldo delle transazioni di Gennaio # - se il valore ottenuto \u00e8 negativo salvare il nome del cliente e del mese in una collezione # - ripetere per i mesi successivi   # Level 1 customer_overdraft_usage = {}  for customer_name, starting_balance in customer_balance_last_year.items():     print(f\"Analisi del cliente {customer_name}\")      # Inizializziamo una lista vuota per tenere traccia dei mesi in cui il cliente attuale ha usato lo scoperto.     current_customer_overdraft_months = []      # Fermiamoci immediatamente se il cliente non ha attivo il servizio di scoperto.     if customer_has_overdraft[customer_name] == False:         print(f\"Il cliente {customer_name} non ha attivo il servizio di scoperto.\")         # Aggiungiamo una lista vuota nel dizionario per il cliente attuale         customer_overdraft_usage[customer_name] = []          continue     # Inizializziamo al fine anno precedente     balance_at_months_end = starting_balance     # Iteriamo sui mesi     for n_month in range(N_MONTHS):         month_name = months[n_month]         print(f\"Analisi del mese {month_name} per il cliente {customer_name}.\")         # Aggiungiamo il saldo delle transazioni del mese in esame         balance_at_months_end += customer_transaction_balances[customer_name][n_month]         # Se siamo in negativo, dobbiamo aggiungere il nome del mese corrente alla lista         if balance_at_months_end &lt; 0:             print(f\"Il cliente {customer_name} ha un saldo di {balance_at_months_end} nel mese di {month_name}.\")             current_customer_overdraft_months.append(month_name)      # Completata l'iterazione sui mesi abbiamo che la lista current_customer_overdraft_months contiene i nomi dei mesi     # in cui il cliente attualmente in considerazione ha usato lo scoperto, dobbiamo solo salvarlo nel dizionario che     # abbiamo predisposto in precedenza     customer_overdraft_usage[customer_name] = current_customer_overdraft_months  pprint(customer_overdraft_usage)  # Level 2 # Introduciamo alcune migliorie: quando abbiamo bisogno sia dell'indice che dell'elemento in una iterazione possiamo # usare enumerate. Inoltre possiamo verificare che una condizione \u00e8 falsa tramite l'operatore not customer_overdraft_usage = {}  for customer_name, starting_balance in customer_balance_last_year.items():     if not customer_has_overdraft[customer_name]:         customer_overdraft_usage[customer_name] = []         continue      balance_at_months_end = starting_balance     overdraft_months = []      for n_month, month in enumerate(months):         balance_at_months_end += customer_transaction_balances[customer_name][n_month]         if balance_at_months_end &lt; 0:             overdraft_months.append(month)      customer_overdraft_usage[customer_name] = overdraft_months  pprint(customer_overdraft_usage) <pre>Analisi del cliente Mario\nAnalisi del mese Gennaio per il cliente Mario.\nAnalisi del mese Febbraio per il cliente Mario.\nAnalisi del mese Marzo per il cliente Mario.\nAnalisi del mese Aprile per il cliente Mario.\nAnalisi del mese Maggio per il cliente Mario.\nAnalisi del mese Giugno per il cliente Mario.\nAnalisi del mese Luglio per il cliente Mario.\nAnalisi del mese Agosto per il cliente Mario.\nAnalisi del mese Settembre per il cliente Mario.\nAnalisi del mese Ottobre per il cliente Mario.\nAnalisi del mese Novembre per il cliente Mario.\nAnalisi del mese Dicembre per il cliente Mario.\nAnalisi del cliente Alessia\nAnalisi del mese Gennaio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -131.32 nel mese di Gennaio.\nAnalisi del mese Febbraio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -245.51 nel mese di Febbraio.\nAnalisi del mese Marzo per il cliente Alessia.\nIl cliente Alessia ha un saldo di -440.02 nel mese di Marzo.\nAnalisi del mese Aprile per il cliente Alessia.\nIl cliente Alessia ha un saldo di -618.28 nel mese di Aprile.\nAnalisi del mese Maggio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -899.24 nel mese di Maggio.\nAnalisi del mese Giugno per il cliente Alessia.\nIl cliente Alessia ha un saldo di -740.57 nel mese di Giugno.\nAnalisi del mese Luglio per il cliente Alessia.\nIl cliente Alessia ha un saldo di -998.01 nel mese di Luglio.\nAnalisi del mese Agosto per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1282.5 nel mese di Agosto.\nAnalisi del mese Settembre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1479.26 nel mese di Settembre.\nAnalisi del mese Ottobre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1720.3 nel mese di Ottobre.\nAnalisi del mese Novembre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1421.98 nel mese di Novembre.\nAnalisi del mese Dicembre per il cliente Alessia.\nIl cliente Alessia ha un saldo di -1229.23 nel mese di Dicembre.\nAnalisi del cliente Anita\nIl cliente Anita non ha attivo il servizio di scoperto.\nAnalisi del cliente Csaba\nAnalisi del mese Gennaio per il cliente Csaba.\nAnalisi del mese Febbraio per il cliente Csaba.\nAnalisi del mese Marzo per il cliente Csaba.\nAnalisi del mese Aprile per il cliente Csaba.\nAnalisi del mese Maggio per il cliente Csaba.\nAnalisi del mese Giugno per il cliente Csaba.\nAnalisi del mese Luglio per il cliente Csaba.\nAnalisi del mese Agosto per il cliente Csaba.\nAnalisi del mese Settembre per il cliente Csaba.\nAnalisi del mese Ottobre per il cliente Csaba.\nAnalisi del mese Novembre per il cliente Csaba.\nAnalisi del mese Dicembre per il cliente Csaba.\nAnalisi del cliente Ron\nAnalisi del mese Gennaio per il cliente Ron.\nIl cliente Ron ha un saldo di -10.86 nel mese di Gennaio.\nAnalisi del mese Febbraio per il cliente Ron.\nIl cliente Ron ha un saldo di -84.31 nel mese di Febbraio.\nAnalisi del mese Marzo per il cliente Ron.\nIl cliente Ron ha un saldo di -53.99 nel mese di Marzo.\nAnalisi del mese Aprile per il cliente Ron.\nIl cliente Ron ha un saldo di -1.0 nel mese di Aprile.\nAnalisi del mese Maggio per il cliente Ron.\nAnalisi del mese Giugno per il cliente Ron.\nAnalisi del mese Luglio per il cliente Ron.\nIl cliente Ron ha un saldo di -26.319999999999993 nel mese di Luglio.\nAnalisi del mese Agosto per il cliente Ron.\nAnalisi del mese Settembre per il cliente Ron.\nIl cliente Ron ha un saldo di -98.17 nel mese di Settembre.\nAnalisi del mese Ottobre per il cliente Ron.\nIl cliente Ron ha un saldo di -114.41 nel mese di Ottobre.\nAnalisi del mese Novembre per il cliente Ron.\nAnalisi del mese Dicembre per il cliente Ron.\n{'Alessia': ['Gennaio',\n             'Febbraio',\n             'Marzo',\n             'Aprile',\n             'Maggio',\n             'Giugno',\n             'Luglio',\n             'Agosto',\n             'Settembre',\n             'Ottobre',\n             'Novembre',\n             'Dicembre'],\n 'Anita': [],\n 'Csaba': [],\n 'Mario': [],\n 'Ron': ['Gennaio',\n         'Febbraio',\n         'Marzo',\n         'Aprile',\n         'Luglio',\n         'Settembre',\n         'Ottobre']}\n{'Alessia': ['Gennaio',\n             'Febbraio',\n             'Marzo',\n             'Aprile',\n             'Maggio',\n             'Giugno',\n             'Luglio',\n             'Agosto',\n             'Settembre',\n             'Ottobre',\n             'Novembre',\n             'Dicembre'],\n 'Anita': [],\n 'Csaba': [],\n 'Mario': [],\n 'Ron': ['Gennaio',\n         'Febbraio',\n         'Marzo',\n         'Aprile',\n         'Luglio',\n         'Settembre',\n         'Ottobre']}\n</pre> <ol> <li>Calcolare i ricavi totali per cliente <code>tot_rev_on_customer</code> come la somma di tutte le commissioni applicate per il conto e per gli scoperti.</li> </ol> In\u00a0[25]: Copied! <pre># Per risolvere l'esercizio \u00e8 sufficiente modificare il codice precedente per tenere traccia dell'ammontare della\n# commissione\n\ncustomer_overdraft_fees = {}\n\nfor customer_name, starting_balance in customer_balance_last_year.items():\n    if not customer_has_overdraft[customer_name]:\n        # Piuttosto che registrare uno zero, \u00e8 preferibile usare un None per discriminare tra chi ha il servizio attivo\n        # ma non ne ha usufruito e chi invece non lo ha affatto.\n        customer_overdraft_fees[customer_name] = None\n        continue\n\n    balance_at_months_end = starting_balance\n    total_fees = 0\n\n    for n_month, _ in enumerate(months):\n        balance_at_months_end += customer_transaction_balances[customer_name][n_month]\n        if balance_at_months_end &lt; 0:\n            total_fees += get_overdraft_monthly_fees(abs(balance_at_months_end))\n\n    customer_overdraft_fees[customer_name] = total_fees\n\npprint(customer_overdraft_fees)\n</pre> # Per risolvere l'esercizio \u00e8 sufficiente modificare il codice precedente per tenere traccia dell'ammontare della # commissione  customer_overdraft_fees = {}  for customer_name, starting_balance in customer_balance_last_year.items():     if not customer_has_overdraft[customer_name]:         # Piuttosto che registrare uno zero, \u00e8 preferibile usare un None per discriminare tra chi ha il servizio attivo         # ma non ne ha usufruito e chi invece non lo ha affatto.         customer_overdraft_fees[customer_name] = None         continue      balance_at_months_end = starting_balance     total_fees = 0      for n_month, _ in enumerate(months):         balance_at_months_end += customer_transaction_balances[customer_name][n_month]         if balance_at_months_end &lt; 0:             total_fees += get_overdraft_monthly_fees(abs(balance_at_months_end))      customer_overdraft_fees[customer_name] = total_fees  pprint(customer_overdraft_fees) <pre>{'Alessia': 14.5, 'Anita': None, 'Csaba': 0, 'Mario': 0, 'Ron': 7}\n</pre> <ol> <li>Calcolare i ricavi complessivi della banca <code>tot_rev_bank</code>.</li> </ol> In\u00a0[26]: Copied! <pre># I ricavi complessivi si ottengono sommando i valori ottenuti nello step precedente, tuttavia c'\u00e8 un'accortezza di cui\n# tener conto: abbiamo registrato un None per Anita, che non ha attivo il servizio di scoperto. Dobbiamo quindi sommare\n# non su customer_overdraft_fees ma su una lista costruita a partire da questo dizionario\n\ntotal_fees_final = sum([value if value else 0 for _, value in customer_overdraft_fees.items()])\nprint(f\"Ricavi totali: {total_fees_final}\")\n</pre> # I ricavi complessivi si ottengono sommando i valori ottenuti nello step precedente, tuttavia c'\u00e8 un'accortezza di cui # tener conto: abbiamo registrato un None per Anita, che non ha attivo il servizio di scoperto. Dobbiamo quindi sommare # non su customer_overdraft_fees ma su una lista costruita a partire da questo dizionario  total_fees_final = sum([value if value else 0 for _, value in customer_overdraft_fees.items()]) print(f\"Ricavi totali: {total_fees_final}\") <pre>Ricavi totali: 21.5\n</pre>"},{"location":"notebooks/solutions/bank.html#esercizio","title":"Esercizio\u00b6","text":""},{"location":"notebooks/solutions/bank.html#assunzioni","title":"Assunzioni\u00b6","text":"<p>La \"STEM Bank\" ha 5 clienti:</p> <ul> <li>Mario.</li> <li>Alessia.</li> <li>Anita.</li> <li>Csaba.</li> <li>Ron.</li> </ul> <p>La banca offre due tipi di conti correnti:</p> <ul> <li>Base: gratuito.</li> <li>Premium: costo 4 \u20ac al mese.</li> </ul> <p>La banca offre anche l'attivazione di servizio di scoperto. La copertura massima dello scoperto \u00e8:</p> <ul> <li>3000 \u20ac per i conti Base.</li> <li>12000 \u20ac per i conti Premium.</li> </ul> <p>Il costo dello scoperto \u00e8 pari a:</p> <ul> <li>1 \u20ac fino a 1500 \u20ac.</li> <li>3.5 \u20ac fino a 3000 \u20ac.</li> <li>6 \u20ac fino a 5000 \u20ac.</li> <li>6 \u20ac + 0.05% della somma eccedente i 5000 \u20ac per gli importi sopra i 5000 \u20ac.</li> </ul> <p>Di seguito \u00e8 presente una tabella in cui sono mostrate sinteticamente le info descritte in precedenza.</p>"},{"location":"notebooks/solutions/bank.html#commenti-variabili-e-costanti","title":"Commenti, Variabili e Costanti\u00b6","text":"<ol> <li>Assegnare il nome della banca che offre il conto alla variabile <code>bank_name</code>. Stampare un messaggio di benvenuto usando le f-string.</li> </ol>"},{"location":"notebooks/solutions/bank.html#collezioni","title":"Collezioni\u00b6","text":"<ol> <li>Definire un dizionario <code>customer_account_type</code> le cui chiavi sono i clienti e i valori contenengono la tipologia di conto corrente.</li> </ol>"},{"location":"notebooks/solutions/bank.html#control-flow","title":"Control Flow\u00b6","text":"<ol> <li>Verificare se nel mese di Gennaio Mario ha effettuato delle transazioni. nel caso in cui l'esito sia positivo stampare il seguente messaggio \"Mario ha effettuato transazioni a Gennaio\" altrimento stampare il seguente messaggio \"Mario non ha effettuato transazioni a Gennaio\"</li> </ol>"},{"location":"notebooks/solutions/bank.html#funzioni","title":"Funzioni\u00b6","text":"<ol> <li>Definire una funzione <code>get_transaction_sign</code> che restituisca il valore <code>True</code> se la transazione ha segno negativo e <code>False</code> se ha segno positivo.</li> </ol>"},{"location":"notebooks/solutions/bank.html#classi","title":"Classi\u00b6","text":"<ol> <li><p>Finora abbiamo considerato le varie caratteristiche del cliente in maniera separata. Ora creiamo una classe <code>Customer</code> che contenga tutte le informazioni pertinenti ad un dato cliente. La classe dovr\u00e0 avere quindi gli attributi: <code>account_type</code> (\"Base\" o \"Premium\"), <code>has_overdraft_service</code>(<code>True</code> o <code>False</code>) ed il bilancio (un numero float) ed ovviamente un attributo <code>name</code> contente il nome del cliente. Dovremo poter inizializzare la classe per Mario cos\u00ec:</p> <pre>mario = Customer(\"Mario\", \"Base\", True, 1020.01)\n</pre> </li> </ol>"},{"location":"notebooks/solutions/bank.html#esercizio-finale","title":"Esercizio Finale\u00b6","text":"<p>Completiamo il puzzle</p> <ol> <li>Calcolare il saldo al 31/12/23 per ciascun cliente <code>outstanding_eoy_customer</code>.</li> </ol>"}]}